package proyecto1Compi;

import java_cup.runtime.Symbol;

//PARSER 
parser code {:
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

:}

action code
{://Codigo de usuario
    String tmp="";
:}


terminal Pragma,Solidity,Caret,Contract,Enum,Public,Private,Struct,Function,Returns,Return,This,While,Do,For,If,Else,Break,Continue,O_Braces,C_Braces,O_Brackets,C_Brackets,O_Parentheses,C_Parentheses,Equal,Comma,Semicolon,Period,QuestionMark,Colon;
terminal String Identifier,String,Hexadecimal,Version,Boolean_Value,ERROR;
terminal Integer Number;

nonterminal String Var_Type,Modifier,Transac,Arithmetic_Op,Boolean_Op,Units,Reserved,Op,AA,EnumIds,Privacy,ArrayValue,Array,Literal;
nonterminal START,CONTRACT,ENUM,VAR,STRUCT,FUNCTION,ASIGNATION,FUNC_CALL,EXPRESSION,IDENTIFIER,WHILE,FOR,DO,IF_ELSE,TERNARY,AR_OP,BOOL_OP,VAR_PRIMA,VAR_PRIMA_PRIMA_PRIMA,Var_PRIMA_PRIMA;


//agregamos la precedencia

//precedence left MAS, MENOS;
//precedence left POR, DIV; 


start with START;

START ::= Pragma Solidity Version Semicolon CONTRACT;

CONTRACT ::= Contract Identifier O_Braces AA C_Braces;

AA ::= ENUM AA | VAR AA | STRUCT AA | FUNCTION AA |  ;

ENUM ::= Enum Identifier O_Braces EnumIds C_Braces;

EnumIds ::= Identifier Comma EnumIds | Identifier;

VAR ::= Var_Type Var_PRIMA_PRIMA;

VAR_PRIMA ::= Equal VAR_PRIMA_PRIMA_PRIMA |  ;

VAR_PRIMA_PRIMA_PRIMA ::= Literal | Identifier | Array;

Var_PRIMA_PRIMA ::= Privacy Identifier VAR_PRIMA | O_Brackets C_Brackets Identifier VAR_PRIMA;

Literal ::= Number | String | Boolean_Value;

Array ::= O_Brackets ArrayValue C_Brackets;

ArrayValue ::= Integer ArrayValue | String ArrayValue | Boolean_Value ArrayValue | O_Brackets ArrayValue C_Brackets |  ;

Privacy ::= Public | Private;




INICIO ::= SENTENCIAS
                {:
                    System.out.println(tmp);
                    tmp="";
                :}
;

SENTENCIAS ::= SENTENCIAS S
    |S
;

S ::= VIS:vi TIPO:tip ID:id PAR_A 
                {:
                    if(!tip.equalsIgnoreCase("void")){
                        tmp+="funcion "+vi+" "+tip+" "+id+"(";
                    }else{
                        tmp+="metodo "+vi+" "+id+"(";
                    }
                :}
    LIST PAR_C LLAV_A
                {:
                    tmp+=")"+"{\n";
                :}
    CUERPO LLAV_C
                {:
                    tmp+="}\n";
                :}

    | error PYCOMA
    | error LLAV_C
;

LIST ::= LIST COMA
                {:
                    tmp+=",";
                :} 
    L

    | L
;

L ::= TIPO:tip ID:id
                {:
                    tmp+=tip+" "+id;
                :}
;

CUERPO ::= CUERPO C
    | C
;

C ::= TIPO:tip ID:id ASIGNA ENTERO:num PYCOMA 
                {:
                    tmp+=tip+" "+id+"="+num+";\n";
                :}
    |PRINT PAR_A CADENA:cad PAR_C PYCOMA
                {:
                    tmp+="imprimir("+cad+");\n";
                :}
;

TIPO ::= INT1:in 
                {:
                    RESULT=in;
                :}
    | CHAR1:ch
                {:
                    RESULT=ch;
                :}
    | VOI:vo
                {:
                    RESULT=vo;
                :}
;

VIS ::= PUB:pu
                {:
                    RESULT=pu;
                :}
    | PRI:pr 
                {:
                    RESULT=pr;
                :}
;

