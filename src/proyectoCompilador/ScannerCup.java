// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/proyectoCompilador/scannerCup.jflex

package proyectoCompilador;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class ScannerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  3,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  4,  5,  0,  0,  6,  7,  8,  9, 10, 11, 12, 13, 12, 14, 15, 
    16, 17, 18, 19, 20, 21, 22, 16, 23, 16, 24, 25, 26, 27, 28, 29, 
     0, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 32, 31, 
    33, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34, 35, 36, 37,  0, 
     0, 38, 39, 40, 41, 42, 43, 44, 45, 46, 31, 47, 48, 49, 50, 51, 
    52, 31, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\2\4\1\10\1\11\1\4\1\12\1\13"+
    "\1\14\1\3\1\15\1\3\1\16\2\17\1\20\1\21"+
    "\1\22\21\17\1\23\1\5\1\24\1\5\1\3\1\0"+
    "\1\25\3\0\1\12\1\0\1\2\1\12\1\0\2\17"+
    "\1\26\10\17\1\27\12\17\1\30\26\17\6\0\17\17"+
    "\1\31\2\17\1\26\2\17\1\32\23\17\1\33\1\17"+
    "\2\0\3\17\1\32\1\17\1\32\1\34\3\17\1\35"+
    "\1\36\4\17\2\0\2\17\1\32\13\17\1\34\4\17"+
    "\1\37\1\17\1\40\1\17\1\32\4\17\1\41\6\17"+
    "\1\42\2\17\2\0\21\17\1\43\1\44\10\17\1\45"+
    "\5\17\1\46\1\47\1\17\1\50\7\17\1\51\1\52"+
    "\1\53\3\17\1\54\1\55\1\17\1\56\1\57\4\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\204\0\306\0\102\0\u0108\0\u014a"+
    "\0\102\0\102\0\u018c\0\u01ce\0\102\0\u0210\0\u0252\0\u0294"+
    "\0\102\0\102\0\u02d6\0\204\0\u0318\0\102\0\u035a\0\u039c"+
    "\0\102\0\102\0\102\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6"+
    "\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u077a\0\u07bc\0\u07fe\0\102\0\u0840\0\102\0\102"+
    "\0\102\0\306\0\102\0\u0882\0\u014a\0\u08c4\0\u0210\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u035a\0\u0a92\0\u0ad4"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u035a\0\u0ca2"+
    "\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u035a\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080"+
    "\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u0210\0\u162c\0\u166e"+
    "\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e"+
    "\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u035a\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c"+
    "\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u035a"+
    "\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u035a\0\u2208"+
    "\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u035a\0\u035a\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4"+
    "\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4"+
    "\0\u27f6\0\u2838\0\u287a\0\u035a\0\u28bc\0\u28fe\0\u2940\0\u2982"+
    "\0\u035a\0\u29c4\0\u035a\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e"+
    "\0\u2b50\0\u035a\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc"+
    "\0\u035a\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa"+
    "\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba"+
    "\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u035a\0\u035a"+
    "\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456"+
    "\0\102\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u035a\0\u35e2"+
    "\0\u3624\0\u035a\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0"+
    "\0\u37f2\0\u035a\0\u035a\0\u035a\0\u3834\0\u3876\0\u38b8\0\u035a"+
    "\0\u035a\0\u38fa\0\u035a\0\u035a\0\u393c\0\u397e\0\u39c0\0\u3a02";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\10\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\3\27\1\30"+
    "\1\31\1\2\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\27\1\42\1\43\2\27\1\44\2\27"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\27"+
    "\1\54\1\27\1\55\1\56\1\57\1\60\135\0\1\61"+
    "\46\0\2\62\1\0\2\62\1\63\35\62\1\64\36\62"+
    "\7\0\1\61\72\0\2\65\1\0\5\65\1\63\32\65"+
    "\1\66\36\65\13\0\1\60\17\0\1\6\101\0\1\6"+
    "\66\0\10\67\65\0\1\70\3\0\1\71\13\0\1\6"+
    "\64\0\1\72\1\0\10\20\22\0\1\73\61\0\1\60"+
    "\1\61\101\0\1\61\1\60\65\0\10\27\6\0\4\27"+
    "\4\0\30\27\24\0\10\27\6\0\4\27\4\0\17\27"+
    "\1\74\10\27\24\0\10\27\6\0\4\27\4\0\3\27"+
    "\1\75\14\27\1\76\7\27\24\0\10\27\6\0\4\27"+
    "\4\0\1\77\14\27\1\100\1\27\1\101\6\27\1\102"+
    "\1\27\24\0\10\27\6\0\4\27\4\0\1\103\14\27"+
    "\1\104\12\27\24\0\10\27\6\0\4\27\4\0\1\105"+
    "\3\27\1\106\10\27\1\107\12\27\24\0\10\27\6\0"+
    "\4\27\4\0\12\27\1\110\1\27\1\111\4\27\1\112"+
    "\6\27\24\0\10\27\6\0\4\27\4\0\1\113\7\27"+
    "\1\114\4\27\1\115\1\27\1\116\2\27\1\117\5\27"+
    "\24\0\10\27\6\0\4\27\4\0\4\27\1\120\10\27"+
    "\1\121\12\27\24\0\10\27\6\0\4\27\4\0\5\27"+
    "\1\122\5\27\1\123\1\124\13\27\24\0\10\27\6\0"+
    "\4\27\4\0\1\125\7\27\1\126\4\27\1\127\12\27"+
    "\24\0\10\27\6\0\4\27\4\0\1\130\16\27\1\131"+
    "\2\27\1\132\5\27\24\0\10\27\6\0\4\27\4\0"+
    "\4\27\1\133\23\27\24\0\10\27\6\0\4\27\4\0"+
    "\4\27\1\134\10\27\1\135\3\27\1\136\5\27\1\137"+
    "\24\0\10\27\6\0\4\27\4\0\7\27\1\140\7\27"+
    "\1\141\10\27\24\0\10\27\6\0\4\27\4\0\5\27"+
    "\1\142\2\27\1\143\17\27\24\0\10\27\6\0\4\27"+
    "\4\0\1\144\7\27\1\145\17\27\24\0\10\27\6\0"+
    "\4\27\4\0\4\27\1\146\2\27\1\147\20\27\24\0"+
    "\10\27\6\0\4\27\4\0\4\27\1\150\23\27\103\0"+
    "\1\61\64\0\1\62\5\0\1\151\2\0\1\152\70\0"+
    "\1\65\5\0\1\153\2\0\1\154\6\0\13\70\1\155"+
    "\66\70\2\71\2\0\76\71\20\0\10\72\22\0\1\73"+
    "\43\0\1\156\3\0\10\67\72\0\10\27\6\0\4\27"+
    "\4\0\1\157\27\27\24\0\10\27\6\0\4\27\4\0"+
    "\3\27\1\160\24\27\24\0\10\27\6\0\4\27\4\0"+
    "\12\27\1\161\15\27\24\0\10\27\6\0\4\27\4\0"+
    "\15\27\1\162\12\27\24\0\10\27\6\0\4\27\4\0"+
    "\4\27\1\163\23\27\24\0\10\27\6\0\4\27\4\0"+
    "\21\27\1\164\6\27\24\0\10\27\6\0\4\27\4\0"+
    "\12\27\1\165\15\27\24\0\10\27\6\0\4\27\4\0"+
    "\14\27\1\166\13\27\24\0\10\27\6\0\4\27\4\0"+
    "\26\27\1\167\1\27\24\0\10\27\6\0\4\27\4\0"+
    "\12\27\1\170\15\27\24\0\10\27\6\0\4\27\4\0"+
    "\20\27\1\171\7\27\24\0\10\27\6\0\4\27\4\0"+
    "\22\27\1\172\5\27\24\0\10\27\6\0\4\27\4\0"+
    "\7\27\1\173\20\27\24\0\10\27\6\0\4\27\4\0"+
    "\12\27\1\174\15\27\24\0\10\27\6\0\4\27\4\0"+
    "\14\27\1\175\13\27\24\0\10\27\6\0\4\27\4\0"+
    "\17\27\1\176\10\27\24\0\10\27\6\0\4\27\4\0"+
    "\15\27\1\177\12\27\24\0\10\27\6\0\4\27\4\0"+
    "\14\27\1\200\13\27\24\0\10\27\6\0\4\27\4\0"+
    "\25\27\1\201\2\27\24\0\10\27\6\0\4\27\4\0"+
    "\22\27\1\202\5\27\24\0\10\27\6\0\4\27\4\0"+
    "\16\27\1\203\11\27\24\0\10\27\6\0\4\27\4\0"+
    "\21\27\1\204\6\27\24\0\10\27\6\0\4\27\4\0"+
    "\16\27\1\205\11\27\24\0\10\27\6\0\4\27\4\0"+
    "\14\27\1\206\13\27\24\0\10\27\6\0\4\27\4\0"+
    "\3\27\1\207\24\27\24\0\10\27\6\0\4\27\4\0"+
    "\26\27\1\210\1\27\24\0\10\27\6\0\4\27\4\0"+
    "\1\157\7\27\1\211\17\27\24\0\10\27\6\0\4\27"+
    "\4\0\1\27\1\212\26\27\24\0\10\27\6\0\4\27"+
    "\4\0\21\27\1\213\6\27\24\0\10\27\6\0\4\27"+
    "\4\0\2\27\1\214\11\27\1\215\13\27\24\0\10\27"+
    "\6\0\4\27\4\0\12\27\1\216\15\27\24\0\10\27"+
    "\6\0\4\27\4\0\17\27\1\217\10\27\24\0\10\27"+
    "\6\0\4\27\4\0\1\220\27\27\24\0\10\27\6\0"+
    "\4\27\4\0\10\27\1\221\17\27\24\0\10\27\6\0"+
    "\4\27\4\0\1\222\21\27\1\223\5\27\24\0\10\27"+
    "\6\0\4\27\4\0\10\27\1\224\17\27\24\0\10\27"+
    "\6\0\4\27\4\0\14\27\1\225\13\27\24\0\10\27"+
    "\6\0\4\27\4\0\17\27\1\76\10\27\24\0\10\27"+
    "\6\0\4\27\4\0\4\27\1\226\23\27\24\0\10\27"+
    "\6\0\4\27\4\0\4\27\1\227\3\27\1\230\17\27"+
    "\24\0\10\27\6\0\4\27\4\0\10\27\1\231\17\27"+
    "\24\0\10\27\6\0\4\27\4\0\1\202\27\27\44\0"+
    "\1\152\101\0\1\232\101\0\1\154\101\0\1\233\41\0"+
    "\13\70\1\155\3\70\1\3\62\70\20\0\10\27\6\0"+
    "\4\27\4\0\6\27\1\234\21\27\24\0\10\27\6\0"+
    "\4\27\4\0\17\27\1\235\10\27\24\0\10\27\6\0"+
    "\4\27\4\0\1\236\27\27\24\0\10\27\6\0\4\27"+
    "\4\0\12\27\1\237\15\27\24\0\10\27\6\0\4\27"+
    "\4\0\1\240\27\27\24\0\10\27\6\0\4\27\4\0"+
    "\4\27\1\241\23\27\24\0\10\27\6\0\4\27\4\0"+
    "\12\27\1\242\15\27\24\0\10\27\6\0\4\27\4\0"+
    "\20\27\1\243\1\244\6\27\24\0\10\27\6\0\4\27"+
    "\4\0\20\27\1\230\7\27\24\0\10\27\6\0\4\27"+
    "\4\0\4\27\1\245\23\27\24\0\10\27\6\0\4\27"+
    "\4\0\4\27\1\246\23\27\24\0\10\27\6\0\4\27"+
    "\4\0\13\27\1\247\14\27\24\0\10\27\6\0\4\27"+
    "\4\0\4\27\1\250\23\27\24\0\10\27\6\0\4\27"+
    "\4\0\20\27\1\251\7\27\24\0\10\27\6\0\4\27"+
    "\4\0\14\27\1\252\13\27\24\0\10\27\6\0\4\27"+
    "\4\0\13\27\1\76\14\27\24\0\10\27\6\0\4\27"+
    "\4\0\2\27\1\253\25\27\11\0\1\254\2\0\1\255"+
    "\7\0\10\27\6\0\4\27\4\0\30\27\24\0\10\27"+
    "\6\0\4\27\4\0\17\27\1\167\10\27\24\0\10\27"+
    "\6\0\4\27\4\0\15\27\1\256\12\27\24\0\1\27"+
    "\1\257\1\260\1\261\1\237\1\27\1\262\1\237\6\0"+
    "\4\27\4\0\4\27\1\263\23\27\24\0\10\27\6\0"+
    "\4\27\4\0\16\27\1\264\11\27\24\0\10\27\6\0"+
    "\4\27\4\0\22\27\1\265\5\27\24\0\10\27\6\0"+
    "\4\27\4\0\10\27\1\266\17\27\24\0\10\27\6\0"+
    "\4\27\4\0\1\267\27\27\24\0\10\27\6\0\4\27"+
    "\4\0\23\27\1\270\4\27\24\0\10\27\6\0\4\27"+
    "\4\0\12\27\1\271\15\27\24\0\10\27\6\0\4\27"+
    "\4\0\22\27\1\272\5\27\24\0\10\27\6\0\4\27"+
    "\4\0\15\27\1\273\12\27\24\0\10\27\6\0\4\27"+
    "\4\0\3\27\1\274\24\27\24\0\10\27\6\0\4\27"+
    "\4\0\10\27\1\275\17\27\24\0\10\27\6\0\4\27"+
    "\4\0\10\27\1\276\11\27\1\277\5\27\24\0\10\27"+
    "\6\0\4\27\4\0\1\27\1\300\26\27\24\0\10\27"+
    "\6\0\4\27\4\0\20\27\1\301\7\27\24\0\10\27"+
    "\6\0\4\27\4\0\14\27\1\302\13\27\24\0\10\27"+
    "\6\0\4\27\4\0\4\27\1\303\23\27\24\0\10\27"+
    "\6\0\4\27\4\0\25\27\1\304\2\27\24\0\10\27"+
    "\6\0\4\27\4\0\21\27\1\305\6\27\24\0\10\27"+
    "\6\0\4\27\4\0\24\27\1\76\3\27\24\0\10\27"+
    "\6\0\4\27\4\0\11\27\1\167\16\27\24\0\10\27"+
    "\6\0\4\27\4\0\12\27\1\306\15\27\44\0\1\62"+
    "\101\0\1\65\61\0\10\27\6\0\4\27\4\0\13\27"+
    "\1\307\14\27\24\0\10\27\6\0\4\27\4\0\4\27"+
    "\1\310\23\27\24\0\10\27\6\0\4\27\4\0\14\27"+
    "\1\311\13\27\24\0\10\27\6\0\4\27\4\0\11\27"+
    "\1\312\16\27\24\0\10\27\6\0\4\27\4\0\20\27"+
    "\1\305\7\27\24\0\10\27\6\0\4\27\4\0\2\27"+
    "\1\313\25\27\24\0\10\27\6\0\4\27\4\0\21\27"+
    "\1\314\6\27\24\0\10\27\6\0\4\27\4\0\10\27"+
    "\1\315\6\27\1\316\10\27\24\0\10\27\6\0\4\27"+
    "\4\0\6\27\1\317\12\27\1\320\6\27\24\0\10\27"+
    "\6\0\4\27\4\0\17\27\1\230\10\27\24\0\10\27"+
    "\6\0\4\27\4\0\4\27\1\321\23\27\24\0\10\27"+
    "\6\0\4\27\4\0\4\27\1\322\23\27\24\0\10\27"+
    "\6\0\4\27\4\0\21\27\1\323\6\27\24\0\10\324"+
    "\6\0\1\324\63\0\10\325\6\0\1\325\63\0\10\27"+
    "\6\0\4\27\4\0\17\27\1\326\10\27\24\0\2\27"+
    "\1\327\3\27\1\237\1\27\6\0\4\27\4\0\30\27"+
    "\24\0\5\27\1\330\2\27\6\0\4\27\4\0\30\27"+
    "\24\0\2\27\1\237\5\27\6\0\4\27\4\0\30\27"+
    "\24\0\4\27\1\237\3\27\6\0\4\27\4\0\30\27"+
    "\24\0\10\27\6\0\4\27\4\0\17\27\1\331\10\27"+
    "\24\0\10\27\6\0\4\27\4\0\10\27\1\332\17\27"+
    "\24\0\10\27\6\0\4\27\4\0\21\27\1\333\6\27"+
    "\24\0\10\27\6\0\4\27\4\0\5\27\1\334\22\27"+
    "\24\0\10\27\6\0\4\27\4\0\1\27\1\335\26\27"+
    "\24\0\10\27\6\0\4\27\4\0\1\336\27\27\24\0"+
    "\10\27\6\0\4\27\4\0\10\27\1\337\17\27\24\0"+
    "\10\27\6\0\4\27\4\0\17\27\1\340\10\27\24\0"+
    "\10\27\6\0\4\27\4\0\14\27\1\341\13\27\24\0"+
    "\10\27\6\0\4\27\4\0\3\27\1\342\24\27\24\0"+
    "\10\27\6\0\4\27\4\0\14\27\1\343\13\27\24\0"+
    "\10\27\6\0\4\27\4\0\2\27\1\344\25\27\24\0"+
    "\10\27\6\0\4\27\4\0\15\27\1\230\12\27\24\0"+
    "\10\27\6\0\4\27\4\0\20\27\1\345\7\27\24\0"+
    "\10\27\6\0\4\27\4\0\4\27\1\346\23\27\24\0"+
    "\1\27\1\257\1\260\1\261\1\237\1\27\1\262\1\237"+
    "\6\0\4\27\4\0\30\27\24\0\10\27\6\0\4\27"+
    "\4\0\4\27\1\347\23\27\24\0\10\27\6\0\4\27"+
    "\4\0\1\350\27\27\24\0\10\27\6\0\4\27\4\0"+
    "\20\27\1\351\7\27\24\0\10\27\6\0\4\27\4\0"+
    "\2\27\1\352\25\27\24\0\10\27\6\0\4\27\4\0"+
    "\15\27\1\353\12\27\24\0\10\27\6\0\4\27\4\0"+
    "\17\27\1\354\10\27\24\0\10\27\6\0\4\27\4\0"+
    "\14\27\1\355\13\27\24\0\10\27\6\0\4\27\4\0"+
    "\1\356\27\27\24\0\10\27\6\0\4\27\4\0\1\357"+
    "\27\27\24\0\10\27\6\0\4\27\4\0\4\27\1\76"+
    "\23\27\24\0\10\27\6\0\4\27\4\0\26\27\1\230"+
    "\1\27\24\0\10\27\6\0\4\27\4\0\10\27\1\360"+
    "\17\27\11\0\1\361\12\0\10\324\6\0\1\324\53\0"+
    "\1\361\7\0\10\325\6\0\1\325\63\0\10\27\6\0"+
    "\4\27\4\0\21\27\1\76\6\27\24\0\7\27\1\237"+
    "\6\0\4\27\4\0\30\27\24\0\6\27\1\237\1\27"+
    "\6\0\4\27\4\0\30\27\24\0\10\27\6\0\4\27"+
    "\4\0\14\27\1\362\13\27\24\0\10\27\6\0\4\27"+
    "\4\0\14\27\1\363\13\27\24\0\10\27\6\0\4\27"+
    "\4\0\4\27\1\167\23\27\24\0\10\27\6\0\4\27"+
    "\4\0\10\27\1\364\17\27\24\0\10\27\6\0\4\27"+
    "\4\0\12\27\1\365\15\27\24\0\10\27\6\0\4\27"+
    "\4\0\21\27\1\366\6\27\24\0\10\27\6\0\4\27"+
    "\4\0\2\27\1\367\25\27\24\0\10\27\6\0\4\27"+
    "\4\0\14\27\1\370\13\27\24\0\10\27\6\0\4\27"+
    "\4\0\3\27\1\167\24\27\24\0\10\27\6\0\4\27"+
    "\4\0\10\27\1\371\17\27\24\0\10\27\6\0\4\27"+
    "\4\0\6\27\1\237\21\27\24\0\10\27\6\0\4\27"+
    "\4\0\21\27\1\372\6\27\24\0\10\27\6\0\4\27"+
    "\4\0\5\27\1\373\22\27\24\0\10\27\6\0\4\27"+
    "\4\0\3\27\1\237\24\27\24\0\10\27\6\0\4\27"+
    "\4\0\20\27\1\237\7\27\24\0\10\27\6\0\4\27"+
    "\4\0\4\27\1\274\23\27\24\0\10\27\6\0\4\27"+
    "\4\0\3\27\1\352\24\27\24\0\10\27\6\0\4\27"+
    "\4\0\22\27\1\374\5\27\24\0\10\27\6\0\4\27"+
    "\4\0\22\27\1\375\5\27\24\0\10\27\6\0\4\27"+
    "\4\0\2\27\1\376\25\27\24\0\10\27\6\0\4\27"+
    "\4\0\21\27\1\377\6\27\24\0\10\27\6\0\4\27"+
    "\4\0\15\27\1\u0100\12\27\24\0\10\27\6\0\4\27"+
    "\4\0\1\u0101\27\27\24\0\10\27\6\0\4\27\4\0"+
    "\6\27\1\76\21\27\24\0\10\27\6\0\4\27\4\0"+
    "\4\27\1\144\23\27\24\0\10\27\6\0\4\27\4\0"+
    "\4\27\1\u0102\23\27\24\0\10\27\6\0\4\27\4\0"+
    "\4\27\1\u0103\23\27\24\0\10\27\6\0\4\27\4\0"+
    "\20\27\1\u0104\7\27\24\0\10\27\6\0\4\27\4\0"+
    "\21\27\1\u0105\6\27\24\0\10\27\6\0\4\27\4\0"+
    "\4\27\1\u0106\23\27\24\0\10\27\6\0\4\27\4\0"+
    "\2\27\1\u0107\25\27\24\0\10\27\6\0\4\27\4\0"+
    "\4\27\1\u0108\23\27\24\0\10\27\6\0\4\27\4\0"+
    "\21\27\1\u0109\6\27\24\0\10\27\6\0\4\27\4\0"+
    "\4\27\1\u010a\23\27\24\0\10\27\6\0\4\27\4\0"+
    "\14\27\1\u010b\13\27\24\0\10\27\6\0\4\27\4\0"+
    "\12\27\1\u0102\15\27\24\0\10\27\6\0\4\27\4\0"+
    "\26\27\1\u010c\1\27\24\0\10\27\6\0\4\27\4\0"+
    "\17\27\1\274\10\27\24\0\10\27\6\0\4\27\4\0"+
    "\21\27\1\u010d\6\27\24\0\10\27\6\0\4\27\4\0"+
    "\2\27\1\u010e\25\27\24\0\10\27\6\0\4\27\4\0"+
    "\15\27\1\144\12\27\24\0\10\27\6\0\4\27\4\0"+
    "\1\u010f\27\27\24\0\10\27\6\0\4\27\4\0\12\27"+
    "\1\u0110\15\27\24\0\10\27\6\0\4\27\4\0\12\27"+
    "\1\274\15\27\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14916];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\2\1\2\11\2\1\1\11"+
    "\3\1\2\11\3\1\1\11\2\1\3\11\21\1\1\11"+
    "\1\1\3\11\1\0\1\11\3\0\1\1\1\0\2\1"+
    "\1\0\55\1\6\0\53\1\2\0\20\1\2\0\46\1"+
    "\2\0\33\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ScannerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            }
            // fall through
          case 48: break;
          case 2:
            { 
            }
            // fall through
          case 49: break;
          case 3:
            { return new Symbol(sym.Boolean_Op, yychar, yyline, yytext());
            }
            // fall through
          case 50: break;
          case 4:
            { return new Symbol(sym.Arithmetic_Op, yychar, yyline, yytext());
            }
            // fall through
          case 51: break;
          case 5:
            { return new Symbol(sym.Operator, yychar, yyline, yytext());
            }
            // fall through
          case 52: break;
          case 6:
            { return new Symbol(sym.O_Parentheses, yychar, yyline, yytext());
            }
            // fall through
          case 53: break;
          case 7:
            { return new Symbol(sym.C_Parentheses, yychar, yyline, yytext());
            }
            // fall through
          case 54: break;
          case 8:
            { return new Symbol(sym.Comma, yychar, yyline, yytext());
            }
            // fall through
          case 55: break;
          case 9:
            { return new Symbol(sym.Period, yychar, yyline, yytext());
            }
            // fall through
          case 56: break;
          case 10:
            { String str = yytext();
            while(str.substring(0, 1).equals("0")){
                str = str.substring(1);
            }
            return new Symbol(sym.Number, yychar, yyline, str);
            }
            // fall through
          case 57: break;
          case 11:
            { return new Symbol(sym.Colon, yychar, yyline, yytext());
            }
            // fall through
          case 58: break;
          case 12:
            { return new Symbol(sym.Semicolon, yychar, yyline, yytext());
            }
            // fall through
          case 59: break;
          case 13:
            { return new Symbol(sym.Equal, yychar, yyline, yytext());
            }
            // fall through
          case 60: break;
          case 14:
            { return new Symbol(sym.QuestionMark, yychar, yyline, yytext());
            }
            // fall through
          case 61: break;
          case 15:
            { return new Symbol(sym.Identifier, yychar, yyline, yytext());
            }
            // fall through
          case 62: break;
          case 16:
            { return new Symbol(sym.O_Brackets, yychar, yyline, yytext());
            }
            // fall through
          case 63: break;
          case 17:
            { return new Symbol(sym.C_Brackets, yychar, yyline, yytext());
            }
            // fall through
          case 64: break;
          case 18:
            { return new Symbol(sym.Caret, yychar, yyline, yytext());
            }
            // fall through
          case 65: break;
          case 19:
            { return new Symbol(sym.O_Braces, yychar, yyline, yytext());
            }
            // fall through
          case 66: break;
          case 20:
            { return new Symbol(sym.C_Braces, yychar, yyline, yytext());
            }
            // fall through
          case 67: break;
          case 21:
            { return new Symbol(sym.String, yychar, yyline, yytext());
            }
            // fall through
          case 68: break;
          case 22:
            { return new Symbol(sym.Reserved, yychar, yyline, yytext());
            }
            // fall through
          case 69: break;
          case 23:
            { return new Symbol(sym.Do, yychar, yyline, yytext());
            }
            // fall through
          case 70: break;
          case 24:
            { return new Symbol(sym.If, yychar, yyline, yytext());
            }
            // fall through
          case 71: break;
          case 25:
            { return new Symbol(sym.For, yychar, yyline, yytext());
            }
            // fall through
          case 72: break;
          case 26:
            { return new Symbol(sym.Var_Type, yychar, yyline, yytext());
            }
            // fall through
          case 73: break;
          case 27:
            { return new Symbol(sym.Units, yychar, yyline, yytext());
            }
            // fall through
          case 74: break;
          case 28:
            { return new Symbol(sym.Transac, yychar, yyline, yytext());
            }
            // fall through
          case 75: break;
          case 29:
            { return new Symbol(sym.Else, yychar, yyline, yytext());
            }
            // fall through
          case 76: break;
          case 30:
            { return new Symbol(sym.Enum, yychar, yyline, yytext());
            }
            // fall through
          case 77: break;
          case 31:
            { return new Symbol(sym.This, yychar, yyline, yytext());
            }
            // fall through
          case 78: break;
          case 32:
            { return new Symbol(sym.True, yychar, yyline, yytext());
            }
            // fall through
          case 79: break;
          case 33:
            { return new Symbol(sym.Break, yychar, yyline, yytext());
            }
            // fall through
          case 80: break;
          case 34:
            { return new Symbol(sym.False, yychar, yyline, yytext());
            }
            // fall through
          case 81: break;
          case 35:
            { return new Symbol(sym.While, yychar, yyline, yytext());
            }
            // fall through
          case 82: break;
          case 36:
            { return new Symbol(sym.Pragma, yychar, yyline, yytext());
            }
            // fall through
          case 83: break;
          case 37:
            { return new Symbol(sym.Hexadecimal, yychar, yyline, yytext());
            }
            // fall through
          case 84: break;
          case 38:
            { return new Symbol(sym.Public, yychar, yyline, yytext());
            }
            // fall through
          case 85: break;
          case 39:
            { return new Symbol(sym.Return, yychar, yyline, yytext());
            }
            // fall through
          case 86: break;
          case 40:
            { return new Symbol(sym.Struct, yychar, yyline, yytext());
            }
            // fall through
          case 87: break;
          case 41:
            { return new Symbol(sym.Modifier, yychar, yyline, yytext());
            }
            // fall through
          case 88: break;
          case 42:
            { return new Symbol(sym.Private, yychar, yyline, yytext());
            }
            // fall through
          case 89: break;
          case 43:
            { return new Symbol(sym.Returns, yychar, yyline, yytext());
            }
            // fall through
          case 90: break;
          case 44:
            { return new Symbol(sym.Continue, yychar, yyline, yytext());
            }
            // fall through
          case 91: break;
          case 45:
            { return new Symbol(sym.Contract, yychar, yyline, yytext());
            }
            // fall through
          case 92: break;
          case 46:
            { return new Symbol(sym.Function, yychar, yyline, yytext());
            }
            // fall through
          case 93: break;
          case 47:
            { return new Symbol(sym.Solidity, yychar, yyline, yytext());
            }
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
