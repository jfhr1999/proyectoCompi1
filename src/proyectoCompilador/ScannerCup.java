// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/proyectoCompilador/scannerCup.jflex

package proyectoCompilador;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class ScannerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  3,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  4,  5,  0,  0,  6,  7,  8,  9, 10, 11, 12, 13, 12, 14, 15, 
    16, 17, 18, 19, 20, 21, 22, 16, 23, 16, 24, 25, 26, 27, 28, 29, 
     0, 30, 30, 30, 30, 30, 31, 32, 32, 32, 32, 32, 32, 32, 33, 32, 
    34, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 36, 37, 38, 39,  0, 
     0, 40, 41, 42, 43, 44, 45, 46, 47, 48, 32, 49, 50, 51, 52, 53, 
    54, 32, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\4\1\10\1\11\1\12\1\4\1\13"+
    "\1\14\1\15\1\16\1\17\1\16\1\20\4\21\1\22"+
    "\1\23\1\24\21\21\1\25\1\5\1\26\1\5\1\27"+
    "\1\0\1\30\1\0\1\31\2\0\1\32\1\13\1\0"+
    "\1\2\1\13\1\0\1\16\3\21\1\0\1\21\1\33"+
    "\10\21\1\34\11\21\1\35\26\21\1\36\6\0\3\21"+
    "\1\0\15\21\1\37\2\21\1\33\2\21\1\40\22\21"+
    "\1\41\1\21\2\0\1\21\1\42\1\0\2\21\1\40"+
    "\1\21\1\40\1\43\3\21\1\44\1\45\3\21\2\0"+
    "\2\21\1\40\13\21\1\43\4\21\1\46\2\21\1\40"+
    "\2\21\1\0\2\21\1\47\10\21\2\0\21\21\1\50"+
    "\1\51\1\52\10\21\1\53\5\21\1\54\1\55\1\21"+
    "\1\56\7\21\1\57\1\60\1\61\3\21\1\62\1\63"+
    "\1\21\1\64\1\65\4\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\104\0\210\0\314\0\104\0\u0110\0\u0154"+
    "\0\104\0\104\0\u0198\0\u01dc\0\104\0\u0220\0\u0264\0\u02a8"+
    "\0\104\0\104\0\u02ec\0\210\0\u0330\0\104\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\104\0\104\0\u0484\0\u04c8\0\u050c\0\u0550"+
    "\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\104\0\u094c"+
    "\0\104\0\104\0\104\0\314\0\104\0\u0990\0\104\0\u0154"+
    "\0\u09d4\0\104\0\u0220\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\104"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0374\0\u0c7c\0\u0cc0"+
    "\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0374\0\u0e9c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u0374\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298"+
    "\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\104"+
    "\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u0220\0\u182c\0\u1870"+
    "\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u0374"+
    "\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c"+
    "\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac"+
    "\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc"+
    "\0\u0374\0\u2310\0\u2354\0\u2398\0\u23dc\0\u0374\0\u2420\0\u2464"+
    "\0\u24a8\0\u0374\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640"+
    "\0\u0374\0\u0374\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8"+
    "\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8"+
    "\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u0374\0\u2b90\0\u2bd4"+
    "\0\u2c18\0\u2c5c\0\u0374\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0"+
    "\0\u2df4\0\u2e38\0\u2e7c\0\u0374\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c"+
    "\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac"+
    "\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc"+
    "\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u0374"+
    "\0\u0374\0\104\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\104\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c"+
    "\0\u0374\0\u3960\0\u39a4\0\u0374\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4"+
    "\0\u3af8\0\u3b3c\0\u3b80\0\u0374\0\u0374\0\u0374\0\u3bc4\0\u3c08"+
    "\0\u3c4c\0\u0374\0\u0374\0\u3c90\0\u0374\0\u0374\0\u3cd4\0\u3d18"+
    "\0\u3d5c\0\u3da0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\10\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\2\27\1\31\1\32\1\33\1\2\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\27\1\44\1\45"+
    "\2\27\1\46\2\27\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\27\1\56\1\27\1\57\1\60\1\61"+
    "\1\62\137\0\1\63\50\0\2\64\1\0\2\64\1\65"+
    "\37\64\1\66\36\64\7\0\1\67\74\0\2\70\1\0"+
    "\5\70\1\65\34\70\1\71\36\70\13\0\1\62\17\0"+
    "\1\72\103\0\1\72\70\0\10\73\67\0\1\74\3\0"+
    "\1\75\13\0\1\72\66\0\1\76\1\0\10\20\24\0"+
    "\1\77\61\0\1\62\1\100\103\0\1\100\1\62\67\0"+
    "\10\27\6\0\6\27\4\0\30\27\24\0\10\27\6\0"+
    "\6\27\4\0\1\101\27\27\24\0\10\27\6\0\6\27"+
    "\4\0\17\27\1\102\10\27\24\0\10\27\6\0\6\27"+
    "\4\0\17\27\1\103\10\27\24\0\10\104\74\0\10\27"+
    "\6\0\6\27\4\0\3\27\1\105\14\27\1\106\7\27"+
    "\24\0\10\27\6\0\6\27\4\0\1\107\14\27\1\110"+
    "\1\27\1\111\6\27\1\112\1\27\24\0\10\27\6\0"+
    "\6\27\4\0\1\113\14\27\1\114\12\27\24\0\10\27"+
    "\6\0\6\27\4\0\1\115\3\27\1\116\10\27\1\117"+
    "\12\27\24\0\10\27\6\0\6\27\4\0\12\27\1\120"+
    "\1\27\1\121\4\27\1\122\6\27\24\0\10\27\6\0"+
    "\6\27\4\0\10\27\1\123\4\27\1\124\1\27\1\125"+
    "\2\27\1\126\5\27\24\0\10\27\6\0\6\27\4\0"+
    "\4\27\1\127\10\27\1\130\12\27\24\0\10\27\6\0"+
    "\6\27\4\0\5\27\1\131\5\27\1\132\1\133\13\27"+
    "\24\0\10\27\6\0\6\27\4\0\1\134\7\27\1\135"+
    "\4\27\1\136\12\27\24\0\10\27\6\0\6\27\4\0"+
    "\1\137\16\27\1\140\2\27\1\141\5\27\24\0\10\27"+
    "\6\0\6\27\4\0\4\27\1\142\23\27\24\0\10\27"+
    "\6\0\6\27\4\0\4\27\1\143\10\27\1\144\3\27"+
    "\1\145\5\27\1\146\24\0\10\27\6\0\6\27\4\0"+
    "\7\27\1\147\7\27\1\150\10\27\24\0\10\27\6\0"+
    "\6\27\4\0\5\27\1\151\2\27\1\152\17\27\24\0"+
    "\10\27\6\0\6\27\4\0\1\153\7\27\1\154\17\27"+
    "\24\0\10\27\6\0\6\27\4\0\4\27\1\155\2\27"+
    "\1\156\20\27\24\0\10\27\6\0\6\27\4\0\4\27"+
    "\1\157\23\27\105\0\1\160\66\0\1\64\5\0\1\161"+
    "\2\0\1\162\72\0\1\70\5\0\1\163\2\0\1\164"+
    "\6\0\13\74\1\165\70\74\2\75\2\0\100\75\20\0"+
    "\10\76\24\0\1\77\43\0\1\166\3\0\10\73\74\0"+
    "\10\27\6\0\6\27\4\0\12\27\1\167\15\27\24\0"+
    "\10\27\6\0\6\27\4\0\1\170\27\27\24\0\10\27"+
    "\6\0\6\27\4\0\22\27\1\171\5\27\22\0\1\172"+
    "\105\0\10\27\6\0\6\27\4\0\3\27\1\173\24\27"+
    "\24\0\10\27\6\0\6\27\4\0\12\27\1\174\15\27"+
    "\24\0\10\27\6\0\6\27\4\0\15\27\1\175\12\27"+
    "\24\0\10\27\6\0\6\27\4\0\4\27\1\176\23\27"+
    "\24\0\10\27\6\0\6\27\4\0\21\27\1\177\6\27"+
    "\24\0\10\27\6\0\6\27\4\0\12\27\1\200\15\27"+
    "\24\0\10\27\6\0\6\27\4\0\14\27\1\201\13\27"+
    "\24\0\10\27\6\0\6\27\4\0\26\27\1\202\1\27"+
    "\24\0\10\27\6\0\6\27\4\0\12\27\1\203\15\27"+
    "\24\0\10\27\6\0\6\27\4\0\20\27\1\204\7\27"+
    "\24\0\10\27\6\0\6\27\4\0\22\27\1\205\5\27"+
    "\24\0\10\27\6\0\6\27\4\0\7\27\1\206\20\27"+
    "\24\0\10\27\6\0\6\27\4\0\14\27\1\207\13\27"+
    "\24\0\10\27\6\0\6\27\4\0\17\27\1\210\10\27"+
    "\24\0\10\27\6\0\6\27\4\0\15\27\1\211\12\27"+
    "\24\0\10\27\6\0\6\27\4\0\14\27\1\212\13\27"+
    "\24\0\10\27\6\0\6\27\4\0\25\27\1\213\2\27"+
    "\24\0\10\27\6\0\6\27\4\0\22\27\1\214\5\27"+
    "\24\0\10\27\6\0\6\27\4\0\16\27\1\215\11\27"+
    "\24\0\10\27\6\0\6\27\4\0\21\27\1\216\6\27"+
    "\24\0\10\27\6\0\6\27\4\0\16\27\1\217\11\27"+
    "\24\0\10\27\6\0\6\27\4\0\14\27\1\220\13\27"+
    "\24\0\10\27\6\0\6\27\4\0\3\27\1\221\24\27"+
    "\24\0\10\27\6\0\6\27\4\0\26\27\1\222\1\27"+
    "\24\0\10\27\6\0\6\27\4\0\1\170\7\27\1\223"+
    "\17\27\24\0\10\27\6\0\6\27\4\0\1\27\1\224"+
    "\26\27\24\0\10\27\6\0\6\27\4\0\21\27\1\225"+
    "\6\27\24\0\10\27\6\0\6\27\4\0\2\27\1\226"+
    "\11\27\1\227\13\27\24\0\10\27\6\0\6\27\4\0"+
    "\12\27\1\230\15\27\24\0\10\27\6\0\6\27\4\0"+
    "\17\27\1\231\10\27\24\0\10\27\6\0\6\27\4\0"+
    "\1\232\27\27\24\0\10\27\6\0\6\27\4\0\10\27"+
    "\1\233\17\27\24\0\10\27\6\0\6\27\4\0\1\234"+
    "\27\27\24\0\10\27\6\0\6\27\4\0\10\27\1\235"+
    "\17\27\24\0\10\27\6\0\6\27\4\0\14\27\1\236"+
    "\13\27\24\0\10\27\6\0\6\27\4\0\17\27\1\106"+
    "\10\27\24\0\10\27\6\0\6\27\4\0\4\27\1\237"+
    "\23\27\24\0\10\27\6\0\6\27\4\0\4\27\1\240"+
    "\3\27\1\241\17\27\24\0\10\27\6\0\6\27\4\0"+
    "\10\27\1\242\17\27\24\0\10\27\6\0\6\27\4\0"+
    "\1\214\27\27\45\0\1\162\103\0\1\243\103\0\1\164"+
    "\103\0\1\244\42\0\13\74\1\165\3\74\1\3\64\74"+
    "\20\0\10\27\6\0\6\27\4\0\20\27\1\171\7\27"+
    "\24\0\10\27\6\0\6\27\4\0\6\27\1\245\21\27"+
    "\24\0\10\27\6\0\6\27\4\0\4\27\1\246\23\27"+
    "\24\0\10\247\74\0\10\27\6\0\6\27\4\0\17\27"+
    "\1\250\10\27\24\0\10\27\6\0\6\27\4\0\1\251"+
    "\27\27\24\0\10\27\6\0\6\27\4\0\12\27\1\252"+
    "\15\27\24\0\10\27\6\0\6\27\4\0\1\253\27\27"+
    "\24\0\10\27\6\0\6\27\4\0\4\27\1\254\23\27"+
    "\24\0\10\27\6\0\6\27\4\0\12\27\1\255\15\27"+
    "\24\0\10\27\6\0\6\27\4\0\20\27\1\256\1\257"+
    "\6\27\24\0\10\27\6\0\6\27\4\0\20\27\1\241"+
    "\7\27\24\0\10\27\6\0\6\27\4\0\4\27\1\260"+
    "\23\27\24\0\10\27\6\0\6\27\4\0\4\27\1\261"+
    "\23\27\24\0\10\27\6\0\6\27\4\0\13\27\1\262"+
    "\14\27\24\0\10\27\6\0\6\27\4\0\4\27\1\263"+
    "\23\27\24\0\10\27\6\0\6\27\4\0\14\27\1\264"+
    "\13\27\24\0\10\27\6\0\6\27\4\0\13\27\1\106"+
    "\14\27\24\0\10\27\6\0\6\27\4\0\2\27\1\265"+
    "\25\27\11\0\1\266\2\0\1\267\7\0\10\27\6\0"+
    "\6\27\4\0\30\27\24\0\10\27\6\0\6\27\4\0"+
    "\17\27\1\202\10\27\24\0\10\27\6\0\6\27\4\0"+
    "\15\27\1\270\12\27\24\0\1\27\1\271\1\272\1\273"+
    "\1\252\1\27\1\274\1\252\6\0\6\27\4\0\4\27"+
    "\1\275\23\27\24\0\10\27\6\0\6\27\4\0\16\27"+
    "\1\276\11\27\24\0\10\27\6\0\6\27\4\0\22\27"+
    "\1\277\5\27\24\0\10\27\6\0\6\27\4\0\10\27"+
    "\1\300\17\27\24\0\10\27\6\0\6\27\4\0\1\301"+
    "\27\27\24\0\10\27\6\0\6\27\4\0\23\27\1\302"+
    "\4\27\24\0\10\27\6\0\6\27\4\0\12\27\1\303"+
    "\15\27\24\0\10\27\6\0\6\27\4\0\22\27\1\304"+
    "\5\27\24\0\10\27\6\0\6\27\4\0\15\27\1\305"+
    "\12\27\24\0\10\27\6\0\6\27\4\0\3\27\1\306"+
    "\24\27\24\0\10\27\6\0\6\27\4\0\10\27\1\307"+
    "\17\27\24\0\10\27\6\0\6\27\4\0\10\27\1\310"+
    "\11\27\1\311\5\27\24\0\10\27\6\0\6\27\4\0"+
    "\1\27\1\312\26\27\24\0\10\27\6\0\6\27\4\0"+
    "\20\27\1\313\7\27\24\0\10\27\6\0\6\27\4\0"+
    "\14\27\1\314\13\27\24\0\10\27\6\0\6\27\4\0"+
    "\25\27\1\315\2\27\24\0\10\27\6\0\6\27\4\0"+
    "\21\27\1\316\6\27\24\0\10\27\6\0\6\27\4\0"+
    "\24\27\1\106\3\27\24\0\10\27\6\0\6\27\4\0"+
    "\11\27\1\202\16\27\24\0\10\27\6\0\6\27\4\0"+
    "\12\27\1\317\15\27\45\0\1\64\103\0\1\70\62\0"+
    "\10\27\6\0\6\27\4\0\13\27\1\320\14\27\22\0"+
    "\1\321\105\0\10\27\6\0\6\27\4\0\4\27\1\322"+
    "\23\27\24\0\10\27\6\0\6\27\4\0\14\27\1\323"+
    "\13\27\24\0\10\27\6\0\6\27\4\0\11\27\1\324"+
    "\16\27\24\0\10\27\6\0\6\27\4\0\20\27\1\316"+
    "\7\27\24\0\10\27\6\0\6\27\4\0\2\27\1\325"+
    "\25\27\24\0\10\27\6\0\6\27\4\0\21\27\1\326"+
    "\6\27\24\0\10\27\6\0\6\27\4\0\10\27\1\327"+
    "\6\27\1\330\10\27\24\0\10\27\6\0\6\27\4\0"+
    "\6\27\1\331\12\27\1\332\6\27\24\0\10\27\6\0"+
    "\6\27\4\0\17\27\1\241\10\27\24\0\10\27\6\0"+
    "\6\27\4\0\4\27\1\333\23\27\24\0\10\27\6\0"+
    "\6\27\4\0\21\27\1\334\6\27\24\0\10\335\6\0"+
    "\2\335\64\0\10\336\6\0\2\336\64\0\10\27\6\0"+
    "\6\27\4\0\17\27\1\337\10\27\24\0\2\27\1\340"+
    "\3\27\1\252\1\27\6\0\6\27\4\0\30\27\24\0"+
    "\5\27\1\341\2\27\6\0\6\27\4\0\30\27\24\0"+
    "\2\27\1\252\5\27\6\0\6\27\4\0\30\27\24\0"+
    "\4\27\1\252\3\27\6\0\6\27\4\0\30\27\24\0"+
    "\10\27\6\0\6\27\4\0\17\27\1\342\10\27\24\0"+
    "\10\27\6\0\6\27\4\0\10\27\1\343\17\27\24\0"+
    "\10\27\6\0\6\27\4\0\21\27\1\344\6\27\24\0"+
    "\10\27\6\0\6\27\4\0\5\27\1\345\22\27\24\0"+
    "\10\27\6\0\6\27\4\0\1\27\1\346\26\27\24\0"+
    "\10\27\6\0\6\27\4\0\1\347\27\27\24\0\10\27"+
    "\6\0\6\27\4\0\10\27\1\350\17\27\24\0\10\27"+
    "\6\0\6\27\4\0\17\27\1\351\10\27\24\0\10\27"+
    "\6\0\6\27\4\0\14\27\1\352\13\27\24\0\10\27"+
    "\6\0\6\27\4\0\3\27\1\353\24\27\24\0\10\27"+
    "\6\0\6\27\4\0\14\27\1\354\13\27\24\0\10\27"+
    "\6\0\6\27\4\0\2\27\1\355\25\27\24\0\10\27"+
    "\6\0\6\27\4\0\15\27\1\241\12\27\24\0\10\27"+
    "\6\0\6\27\4\0\20\27\1\356\7\27\24\0\10\27"+
    "\6\0\6\27\4\0\4\27\1\357\23\27\24\0\1\27"+
    "\1\271\1\272\1\273\1\252\1\27\1\274\1\252\6\0"+
    "\6\27\4\0\30\27\24\0\10\27\6\0\6\27\4\0"+
    "\4\27\1\360\23\27\24\0\10\27\6\0\6\27\4\0"+
    "\1\361\27\27\24\0\10\362\74\0\10\27\6\0\6\27"+
    "\4\0\20\27\1\363\7\27\24\0\10\27\6\0\6\27"+
    "\4\0\2\27\1\364\25\27\24\0\10\27\6\0\6\27"+
    "\4\0\15\27\1\365\12\27\24\0\10\27\6\0\6\27"+
    "\4\0\17\27\1\366\10\27\24\0\10\27\6\0\6\27"+
    "\4\0\14\27\1\367\13\27\24\0\10\27\6\0\6\27"+
    "\4\0\1\370\27\27\24\0\10\27\6\0\6\27\4\0"+
    "\1\371\27\27\24\0\10\27\6\0\6\27\4\0\4\27"+
    "\1\106\23\27\24\0\10\27\6\0\6\27\4\0\26\27"+
    "\1\241\1\27\24\0\10\27\6\0\6\27\4\0\10\27"+
    "\1\372\17\27\11\0\1\373\12\0\10\335\6\0\2\335"+
    "\54\0\1\373\7\0\10\336\6\0\2\336\64\0\10\27"+
    "\6\0\6\27\4\0\21\27\1\106\6\27\24\0\7\27"+
    "\1\252\6\0\6\27\4\0\30\27\24\0\6\27\1\252"+
    "\1\27\6\0\6\27\4\0\30\27\24\0\10\27\6\0"+
    "\6\27\4\0\14\27\1\374\13\27\24\0\10\27\6\0"+
    "\6\27\4\0\14\27\1\375\13\27\24\0\10\27\6\0"+
    "\6\27\4\0\4\27\1\202\23\27\24\0\10\27\6\0"+
    "\6\27\4\0\10\27\1\376\17\27\24\0\10\27\6\0"+
    "\6\27\4\0\12\27\1\377\15\27\24\0\10\27\6\0"+
    "\6\27\4\0\21\27\1\u0100\6\27\24\0\10\27\6\0"+
    "\6\27\4\0\2\27\1\u0101\25\27\24\0\10\27\6\0"+
    "\6\27\4\0\14\27\1\u0102\13\27\24\0\10\27\6\0"+
    "\6\27\4\0\3\27\1\202\24\27\24\0\10\27\6\0"+
    "\6\27\4\0\10\27\1\u0103\17\27\24\0\10\27\6\0"+
    "\6\27\4\0\6\27\1\252\21\27\24\0\10\27\6\0"+
    "\6\27\4\0\21\27\1\u0104\6\27\24\0\10\27\6\0"+
    "\6\27\4\0\5\27\1\u0105\22\27\24\0\10\27\6\0"+
    "\6\27\4\0\3\27\1\252\24\27\24\0\10\27\6\0"+
    "\6\27\4\0\20\27\1\252\7\27\24\0\10\27\6\0"+
    "\6\27\4\0\4\27\1\306\23\27\24\0\10\27\6\0"+
    "\6\27\4\0\3\27\1\364\24\27\24\0\10\27\6\0"+
    "\6\27\4\0\22\27\1\u0106\5\27\24\0\10\27\6\0"+
    "\6\27\4\0\22\27\1\u0107\5\27\24\0\10\27\6\0"+
    "\6\27\4\0\2\27\1\u0108\25\27\24\0\10\27\6\0"+
    "\6\27\4\0\21\27\1\u0109\6\27\24\0\10\27\6\0"+
    "\6\27\4\0\15\27\1\u010a\12\27\24\0\10\27\6\0"+
    "\6\27\4\0\1\u010b\27\27\24\0\10\27\6\0\6\27"+
    "\4\0\6\27\1\106\21\27\24\0\10\27\6\0\6\27"+
    "\4\0\4\27\1\153\23\27\24\0\10\27\6\0\6\27"+
    "\4\0\4\27\1\u010c\23\27\24\0\10\27\6\0\6\27"+
    "\4\0\4\27\1\u010d\23\27\24\0\10\27\6\0\6\27"+
    "\4\0\20\27\1\u010e\7\27\24\0\10\27\6\0\6\27"+
    "\4\0\21\27\1\u010f\6\27\24\0\10\27\6\0\6\27"+
    "\4\0\4\27\1\u0110\23\27\24\0\10\27\6\0\6\27"+
    "\4\0\2\27\1\u0111\25\27\24\0\10\27\6\0\6\27"+
    "\4\0\4\27\1\u0112\23\27\24\0\10\27\6\0\6\27"+
    "\4\0\21\27\1\u0113\6\27\24\0\10\27\6\0\6\27"+
    "\4\0\4\27\1\u0114\23\27\24\0\10\27\6\0\6\27"+
    "\4\0\14\27\1\u0115\13\27\24\0\10\27\6\0\6\27"+
    "\4\0\12\27\1\u010c\15\27\24\0\10\27\6\0\6\27"+
    "\4\0\26\27\1\u0116\1\27\24\0\10\27\6\0\6\27"+
    "\4\0\17\27\1\306\10\27\24\0\10\27\6\0\6\27"+
    "\4\0\21\27\1\u0117\6\27\24\0\10\27\6\0\6\27"+
    "\4\0\2\27\1\u0118\25\27\24\0\10\27\6\0\6\27"+
    "\4\0\15\27\1\153\12\27\24\0\10\27\6\0\6\27"+
    "\4\0\1\u0119\27\27\24\0\10\27\6\0\6\27\4\0"+
    "\12\27\1\u011a\15\27\24\0\10\27\6\0\6\27\4\0"+
    "\12\27\1\306\15\27\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15844];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\2\1\2\11\2\1\1\11"+
    "\3\1\2\11\3\1\1\11\4\1\2\11\22\1\1\11"+
    "\1\1\3\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\1\1\0\2\1\1\0\1\11\3\1\1\0\53\1"+
    "\1\11\6\0\3\1\1\0\50\1\2\0\2\1\1\0"+
    "\16\1\2\0\31\1\1\0\13\1\2\0\23\1\1\11"+
    "\10\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yycolumn, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yycolumn, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ScannerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error Lexico en linea "+ yyline + " Caracter: " + yytext()); return new Symbol(sym.ERROR, yyline, yycolumn, yytext());
            }
            // fall through
          case 54: break;
          case 2:
            { 
            }
            // fall through
          case 55: break;
          case 3:
            { return new Symbol(sym.ExclamationMark, yyline, yycolumn, yytext());
            }
            // fall through
          case 56: break;
          case 4:
            { return new Symbol(sym.Most_Important_Op, yyline, yycolumn, yytext());
            }
            // fall through
          case 57: break;
          case 5:
            { return new Symbol(sym.Operator, yyline, yycolumn, yytext());
            }
            // fall through
          case 58: break;
          case 6:
            { return new Symbol(sym.O_Parentheses, yyline, yycolumn, yytext());
            }
            // fall through
          case 59: break;
          case 7:
            { return new Symbol(sym.C_Parentheses, yyline, yycolumn, yytext());
            }
            // fall through
          case 60: break;
          case 8:
            { return new Symbol(sym.Least_Important_Op, yyline, yycolumn, yytext());
            }
            // fall through
          case 61: break;
          case 9:
            { return new Symbol(sym.Comma, yyline, yycolumn, yytext());
            }
            // fall through
          case 62: break;
          case 10:
            { return new Symbol(sym.Period, yyline, yycolumn, yytext());
            }
            // fall through
          case 63: break;
          case 11:
            { String str = yytext();
            while(str.substring(0, 1).equals("0") && !str.equals("0")){
                str = str.substring(1);
            }
            return new Symbol(sym.Number, yyline, yycolumn, str);
            }
            // fall through
          case 64: break;
          case 12:
            { return new Symbol(sym.Colon, yyline, yycolumn, yytext());
            }
            // fall through
          case 65: break;
          case 13:
            { return new Symbol(sym.Semicolon, yyline, yycolumn, yytext());
            }
            // fall through
          case 66: break;
          case 14:
            { return new Symbol(sym.Greater_Lesser_Op, yyline, yycolumn, yytext());
            }
            // fall through
          case 67: break;
          case 15:
            { return new Symbol(sym.Equal, yyline, yycolumn, yytext());
            }
            // fall through
          case 68: break;
          case 16:
            { return new Symbol(sym.QuestionMark, yyline, yycolumn, yytext());
            }
            // fall through
          case 69: break;
          case 17:
            { return new Symbol(sym.Identifier, yyline, yycolumn, yytext());
            }
            // fall through
          case 70: break;
          case 18:
            { return new Symbol(sym.O_Brackets, yyline, yycolumn, yytext());
            }
            // fall through
          case 71: break;
          case 19:
            { return new Symbol(sym.C_Brackets, yyline, yycolumn, yytext());
            }
            // fall through
          case 72: break;
          case 20:
            { return new Symbol(sym.Caret, yyline, yycolumn, yytext());
            }
            // fall through
          case 73: break;
          case 21:
            { return new Symbol(sym.O_Braces, yyline, yycolumn, yytext());
            }
            // fall through
          case 74: break;
          case 22:
            { return new Symbol(sym.C_Braces, yyline, yycolumn, yytext());
            }
            // fall through
          case 75: break;
          case 23:
            { return new Symbol(sym.Same_Different_Op, yyline, yycolumn, yytext());
            }
            // fall through
          case 76: break;
          case 24:
            { return new Symbol(sym.String, yyline, yycolumn, yytext());
            }
            // fall through
          case 77: break;
          case 25:
            { return new Symbol(sym.And, yyline, yycolumn, yytext());
            }
            // fall through
          case 78: break;
          case 26:
            { return new Symbol(sym.Equals, yyline, yycolumn, yytext());
            }
            // fall through
          case 79: break;
          case 27:
            { return new Symbol(sym.Reserved, yyline, yycolumn, yytext());
            }
            // fall through
          case 80: break;
          case 28:
            { return new Symbol(sym.Do, yyline, yycolumn, yytext());
            }
            // fall through
          case 81: break;
          case 29:
            { return new Symbol(sym.If, yyline, yycolumn, yytext());
            }
            // fall through
          case 82: break;
          case 30:
            { return new Symbol(sym.Or, yyline, yycolumn, yytext());
            }
            // fall through
          case 83: break;
          case 31:
            { return new Symbol(sym.For, yyline, yycolumn, yytext());
            }
            // fall through
          case 84: break;
          case 32:
            { return new Symbol(sym.Var_Type, yyline, yycolumn, yytext());
            }
            // fall through
          case 85: break;
          case 33:
            { return new Symbol(sym.Units, yyline, yycolumn, yytext());
            }
            // fall through
          case 86: break;
          case 34:
            { return new Symbol(sym.Boolean_Value, yyline, yycolumn, yytext());
            }
            // fall through
          case 87: break;
          case 35:
            { return new Symbol(sym.Transac, yyline, yycolumn, yytext());
            }
            // fall through
          case 88: break;
          case 36:
            { return new Symbol(sym.Else, yyline, yycolumn, yytext());
            }
            // fall through
          case 89: break;
          case 37:
            { return new Symbol(sym.Enum, yyline, yycolumn, yytext());
            }
            // fall through
          case 90: break;
          case 38:
            { return new Symbol(sym.This, yyline, yycolumn, yytext());
            }
            // fall through
          case 91: break;
          case 39:
            { return new Symbol(sym.Break, yyline, yycolumn, yytext());
            }
            // fall through
          case 92: break;
          case 40:
            { return new Symbol(sym.While, yyline, yycolumn, yytext());
            }
            // fall through
          case 93: break;
          case 41:
            { return new Symbol(sym.Pragma, yyline, yycolumn, yytext());
            }
            // fall through
          case 94: break;
          case 42:
            { return new Symbol(sym.Version, yyline, yycolumn, yytext());
            }
            // fall through
          case 95: break;
          case 43:
            { return new Symbol(sym.Hexadecimal, yyline, yycolumn, yytext());
            }
            // fall through
          case 96: break;
          case 44:
            { return new Symbol(sym.Public, yyline, yycolumn, yytext());
            }
            // fall through
          case 97: break;
          case 45:
            { return new Symbol(sym.Return, yyline, yycolumn, yytext());
            }
            // fall through
          case 98: break;
          case 46:
            { return new Symbol(sym.Struct, yyline, yycolumn, yytext());
            }
            // fall through
          case 99: break;
          case 47:
            { return new Symbol(sym.Modifier, yyline, yycolumn, yytext());
            }
            // fall through
          case 100: break;
          case 48:
            { return new Symbol(sym.Private, yyline, yycolumn, yytext());
            }
            // fall through
          case 101: break;
          case 49:
            { return new Symbol(sym.Returns, yyline, yycolumn, yytext());
            }
            // fall through
          case 102: break;
          case 50:
            { return new Symbol(sym.Continue, yyline, yycolumn, yytext());
            }
            // fall through
          case 103: break;
          case 51:
            { return new Symbol(sym.Contract, yyline, yycolumn, yytext());
            }
            // fall through
          case 104: break;
          case 52:
            { return new Symbol(sym.Function, yyline, yycolumn, yytext());
            }
            // fall through
          case 105: break;
          case 53:
            { return new Symbol(sym.Solidity, yyline, yycolumn, yytext());
            }
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
