package proyectoCompilador;

import java_cup.runtime.Symbol;
// javacupsymbol empty

//PARSER 
parser code {:
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

:}

action code
{://Codigo de usuario
    String tmp="";
:}


terminal FUNC_BODY,Reserved,Transac,Units,Var_Type,Operator,Identifier,String,Hexadecimal,Version,Boolean_Value,ERROR,Modifier,Number,ExclamationMark,And,Or,Most_Important_Op,Least_Important_Op,Greater_Lesser_Op,Same_Different_Op,Equals,Pragma,Solidity,Caret,Contract,Enum,Public,Private,Struct,Function,Returns,Return,This,While,Do,For,If,Else,Break,Continue,O_Braces,C_Braces,O_Brackets,C_Brackets,O_Parentheses,C_Parentheses,Equal,Comma,Semicolon,Period,QuestionMark,Colon;

nonterminal Enums,Variables,Structs,Functions,FUNC_CALL_PARAMETERS_PRIMA_PRIMA,Modifiers,EnumIds,Privacy,ArrayValue,Array,StructVar,Function_Parameters,FUNC_CALL_PARAMETERS,FUNC_CALL_PARAMETERS_PRIMA,ASIGNATION_PRIMA,Function_Parameters_PRIMA,ArrayValue_PRIMA,ArrayValue_PRIMA_PRIMA,Body_Identifier,Body_Identifier_PRIMA,START,CONTRACT,ENUM,VAR,STRUCT,FUNCTION,ASIGNATION,FUNC_CALL,expression,WHILE,FOR,DO,IF,ELSE,VAR_PRIMA,VAR_PRIMA_PRIMA_PRIMA,Var_PRIMA_PRIMA,RETURNS,primaryExpression,SENTENCIAS;

precedence left Or;
precedence left And;
precedence left Equal;
precedence left Equals;
precedence left Same_Different_Op;
precedence left Greater_Lesser_Op;
precedence left Least_Important_Op;
precedence left Most_Important_Op;
precedence left QuestionMark;

start with START;


//Estructura inicial

START ::= Pragma Solidity Version Semicolon CONTRACT ;

CONTRACT ::= Contract Identifier O_Braces Enums Variables Structs Functions C_Braces ;

Enums ::= Enums ENUM |  ;

Variables ::= Variables VAR |  ;

Structs ::= Structs STRUCT |  ;

Functions ::= Functions FUNCTION |  ;


//Funciones
//LAS DECLARACIONES DE VARIABLES SOLO PUEDEN IR AL PRINCIPIO DE LA FUNCION
FUNCTION ::= Function Identifier O_Parentheses Function_Parameters C_Parentheses Modifiers RETURNS O_Braces Variables SENTENCIAS C_Braces ;

Function_Parameters ::= Var_Type Identifier Function_Parameters_PRIMA |  ;

Function_Parameters_PRIMA ::= Comma Var_Type Identifier Function_Parameters_PRIMA |  ;

Modifiers ::= Public Modifiers | Private Modifiers | Modifier Modifiers |  ;

RETURNS ::= Returns O_Parentheses Var_Type Identifier C_Parentheses |  ;

//FUNC_BODY ::= FUNC_BODY ASIGNATION | FUNC_BODY WHILE | FUNC_BODY FOR | FUNC_BODY DO | FUNC_BODY IF | FUNC_BODY FUNC_CALL |  ;


//Sentencias

SENTENCIAS ::= SENTENCIAS ASIGNATION | SENTENCIAS WHILE | SENTENCIAS FOR | SENTENCIAS DO | SENTENCIAS IF | SENTENCIAS FUNC_CALL | SENTENCIAS Return expression Semicolon | SENTENCIAS Break Semicolon | SENTENCIAS Continue Semicolon |  ;




//Expresiones
//puede estar en funcion

expression ::= expression Or expression | expression And expression | expression Equal expression | expression Equals expression | expression Same_Different_Op expression | expression Greater_Lesser_Op expression | expression Least_Important_Op expression | expression Most_Important_Op expression | expression QuestionMark expression Colon expression | ExclamationMark expression | O_Parentheses expression C_Parentheses | primaryExpression ;

primaryExpression ::= Number | Hexadecimal | String | Boolean_Value | FUNC_CALL | Identifier | Body_Identifier ;


//Identificadores

Body_Identifier ::= Identifier Period Identifier Body_Identifier_PRIMA | This Period Identifier Body_Identifier_PRIMA ;

Body_Identifier_PRIMA ::= O_Parentheses C_Parentheses |  ;


//Enums // pueden estar vacios?

ENUM ::= Enum Identifier O_Braces EnumIds C_Braces ;

EnumIds ::=  EnumIds Comma Identifier | Identifier ;


//Declaración de variables

VAR ::= Var_Type Var_PRIMA_PRIMA Semicolon ;

VAR_PRIMA ::= Equal VAR_PRIMA_PRIMA_PRIMA |  ;

VAR_PRIMA_PRIMA_PRIMA ::= expression | Array ;

Var_PRIMA_PRIMA ::= Privacy Identifier VAR_PRIMA | O_Brackets C_Brackets Identifier VAR_PRIMA ;

Array ::= O_Brackets ArrayValue ArrayValue_PRIMA C_Brackets ;

ArrayValue ::= expression | Array |  ;

ArrayValue_PRIMA ::= Comma ArrayValue_PRIMA_PRIMA |  ;

ArrayValue_PRIMA_PRIMA ::= expression | Array ;

Privacy ::= Public | Private |  ;


//Structs

STRUCT ::= Struct Identifier O_Braces StructVar C_Braces ;

StructVar ::= StructVar VAR | VAR ;


//Asignacion de variables
//puede estar en funcion
ASIGNATION ::= Identifier Equal ASIGNATION_PRIMA Semicolon | Body_Identifier Equal ASIGNATION_PRIMA Semicolon ;

ASIGNATION_PRIMA ::= expression | Array ;


//LLamadas a función
//puede estar en funcion
FUNC_CALL ::= Identifier O_Parentheses FUNC_CALL_PARAMETERS C_Parentheses Semicolon ;

FUNC_CALL_PARAMETERS ::= expression FUNC_CALL_PARAMETERS_PRIMA |  ;

FUNC_CALL_PARAMETERS_PRIMA ::= Comma FUNC_CALL_PARAMETERS_PRIMA_PRIMA |  ;

FUNC_CALL_PARAMETERS_PRIMA_PRIMA ::= expression FUNC_CALL_PARAMETERS_PRIMA ;




//Estructuras de control
//puede estar en función
WHILE ::= While O_Parentheses expression C_Parentheses O_Braces SENTENCIAS C_Braces ;

FOR ::= For O_Parentheses ASIGNATION expression Semicolon expression C_Parentheses O_Braces SENTENCIAS C_Braces ;

DO ::= Do O_Braces SENTENCIAS C_Braces While O_Braces expression C_Parentheses Semicolon ;

IF ::= If O_Parentheses expression C_Parentheses O_Braces SENTENCIAS C_Braces ELSE ;

ELSE ::= Else O_Braces SENTENCIAS C_Braces |  ;


//Errors

















