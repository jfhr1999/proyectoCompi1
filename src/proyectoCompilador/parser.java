
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectoCompilador;

import java_cup.runtime.Symbol;
import semantica.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\026\007\000\002\027" +
    "\012\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\002\000\002\052\002\000\002" +
    "\033\016\000\002\053\002\000\002\015\006\000\002\015" +
    "\002\000\002\054\002\000\002\021\007\000\002\021\002" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\002\000\002\046\007\000\002\046\002\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\005\000\002\050\006" +
    "\000\002\050\005\000\002\050\005\000\002\050\002\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\007\000\002\051\004" +
    "\000\002\051\005\000\002\051\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\024" +
    "\006\000\002\024\006\000\002\025\004\000\002\025\002" +
    "\000\002\030\007\000\002\010\005\000\002\010\003\000" +
    "\002\055\002\000\002\031\006\000\002\043\004\000\002" +
    "\043\002\000\002\044\003\000\002\044\003\000\002\056" +
    "\002\000\002\045\007\000\002\045\007\000\002\057\002" +
    "\000\002\002\006\000\002\002\002\000\002\013\006\000" +
    "\002\012\003\000\002\012\003\000\002\012\002\000\002" +
    "\022\004\000\002\022\002\000\002\023\003\000\002\023" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\002" +
    "\000\002\032\007\000\002\014\004\000\002\014\003\000" +
    "\002\060\002\000\002\034\007\000\002\034\006\000\002" +
    "\020\003\000\002\020\003\000\002\035\006\000\002\061" +
    "\002\000\002\016\005\000\002\016\002\000\002\062\002" +
    "\000\002\017\006\000\002\017\002\000\002\063\002\000" +
    "\002\064\002\000\002\036\013\000\002\065\002\000\002" +
    "\066\002\000\002\037\016\000\002\067\002\000\002\040" +
    "\014\000\002\070\002\000\002\041\013\000\002\042\006" +
    "\000\002\042\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\022\004\001\002\000\004\023\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\055\011\001\002\000" +
    "\004\025\013\001\002\000\004\002\000\001\002\000\004" +
    "\061\014\001\002\000\004\045\015\001\002\000\014\026" +
    "\ufffd\031\ufffd\032\ufffd\046\ufffd\062\ufffd\001\002\000\014" +
    "\026\020\031\ufffb\032\ufffb\046\ufffb\062\ufffb\001\002\000" +
    "\014\026\ufffe\031\ufffe\032\ufffe\046\ufffe\062\ufffe\001\002" +
    "\000\004\061\333\001\002\000\012\031\ufff9\032\ufff9\046" +
    "\ufff9\062\024\001\002\000\034\031\ufffc\032\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\043\ufffc\044" +
    "\ufffc\046\ufffc\061\ufffc\062\ufffc\001\002\000\010\031\152" +
    "\032\ufff7\046\ufff7\001\002\000\012\027\uffc4\030\uffc4\047" +
    "\uffc4\061\uffc4\001\002\000\012\027\031\030\026\047\032" +
    "\061\uffae\001\002\000\004\061\uffaf\001\002\000\004\055" +
    "\151\001\002\000\004\061\145\001\002\000\004\061\uffb0" +
    "\001\002\000\004\050\033\001\002\000\004\061\034\001" +
    "\002\000\010\053\uffb9\054\036\055\uffb9\001\002\000\006" +
    "\053\042\055\uffc1\001\002\000\004\061\037\001\002\000" +
    "\010\053\uffbb\054\uffbb\055\uffbb\001\002\000\010\053\uffb9" +
    "\054\036\055\uffb9\001\002\000\006\053\uffba\055\uffba\001" +
    "\002\000\024\014\053\017\045\035\044\047\046\051\062" +
    "\061\050\063\055\067\057\070\051\001\002\000\004\055" +
    "\uffbc\001\002\000\004\056\142\001\002\000\022\014\053" +
    "\017\045\035\044\051\062\061\050\063\055\067\057\070" +
    "\051\001\002\000\030\014\053\017\045\035\044\047\046" +
    "\050\uffb5\051\062\054\uffb5\061\050\063\055\067\057\070" +
    "\051\001\002\000\004\055\uffbf\001\002\000\042\004\uffcd" +
    "\005\uffcd\020\uffcd\021\uffcd\050\uffcd\051\112\052\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\056\111\057\uffcd\060\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\001\002\000\036\004\uffcf\005\uffcf\020" +
    "\uffcf\021\uffcf\050\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\057\uffcf\060\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002\000" +
    "\036\004\uffcc\005\uffcc\020\uffcc\021\uffcc\050\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\057\uffcc\060\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\001\002\000\036\004\uffd1\005\uffd1\020\uffd1" +
    "\021\uffd1\050\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057" +
    "\uffd1\060\uffd1\064\uffd1\065\uffd1\066\uffd1\001\002\000\036" +
    "\004\uffce\005\uffce\020\uffce\021\uffce\050\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\057\uffce\060\uffce\064\uffce\065\uffce" +
    "\066\uffce\001\002\000\036\004\uffd2\005\uffd2\020\uffd2\021" +
    "\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2" +
    "\060\uffd2\064\uffd2\065\uffd2\066\uffd2\001\002\000\026\004" +
    "\075\005\073\020\065\021\064\053\074\055\uffc0\057\071" +
    "\064\066\065\070\066\067\001\002\000\036\004\uffd0\005" +
    "\uffd0\020\uffd0\021\uffd0\050\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\057\uffd0\060\uffd0\064\uffd0\065\uffd0\066\uffd0\001" +
    "\002\000\004\055\uffc2\001\002\000\036\004\uffd3\005\uffd3" +
    "\020\uffd3\021\uffd3\050\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\057\uffd3\060\uffd3\064\uffd3\065\uffd3\066\uffd3\001\002" +
    "\000\022\014\053\017\045\035\044\051\062\061\050\063" +
    "\055\067\057\070\051\001\002\000\026\004\075\005\073" +
    "\020\065\021\064\052\072\053\074\057\071\064\066\065" +
    "\070\066\067\001\002\000\022\014\053\017\045\035\044" +
    "\051\062\061\050\063\055\067\057\070\051\001\002\000" +
    "\022\014\053\017\045\035\044\051\062\061\050\063\055" +
    "\067\057\070\051\001\002\000\022\014\053\017\045\035" +
    "\044\051\062\061\050\063\055\067\057\070\051\001\002" +
    "\000\022\014\053\017\045\035\044\051\062\061\050\063" +
    "\055\067\057\070\051\001\002\000\022\014\053\017\045" +
    "\035\044\051\062\061\050\063\055\067\057\070\051\001" +
    "\002\000\022\014\053\017\045\035\044\051\062\061\050" +
    "\063\055\067\057\070\051\001\002\000\036\004\uffd4\005" +
    "\uffd4\020\uffd4\021\uffd4\050\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\057\uffd4\060\uffd4\064\uffd4\065\uffd4\066\uffd4\001" +
    "\002\000\022\014\053\017\045\035\044\051\062\061\050" +
    "\063\055\067\057\070\051\001\002\000\022\014\053\017" +
    "\045\035\044\051\062\061\050\063\055\067\057\070\051" +
    "\001\002\000\022\014\053\017\045\035\044\051\062\061" +
    "\050\063\055\067\057\070\051\001\002\000\036\004\uffde" +
    "\005\073\020\065\021\064\050\uffde\052\uffde\053\074\054" +
    "\uffde\055\uffde\057\071\060\uffde\064\066\065\070\066\067" +
    "\001\002\000\036\004\uffdc\005\uffdc\020\065\021\064\050" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\057\071\060\uffdc" +
    "\064\066\065\070\066\067\001\002\000\036\004\uffdd\005" +
    "\uffdd\020\065\021\064\050\uffdd\052\uffdd\053\074\054\uffdd" +
    "\055\uffdd\057\071\060\uffdd\064\066\065\070\066\067\001" +
    "\002\000\026\004\075\005\073\020\065\021\064\053\074" +
    "\057\071\060\102\064\066\065\070\066\067\001\002\000" +
    "\022\014\053\017\045\035\044\051\062\061\050\063\055" +
    "\067\057\070\051\001\002\000\036\004\075\005\073\020" +
    "\065\021\064\050\uffd6\052\uffd6\053\074\054\uffd6\055\uffd6" +
    "\057\071\060\uffd6\064\066\065\070\066\067\001\002\000" +
    "\036\004\uffd9\005\uffd9\020\065\021\uffd9\050\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\057\071\060\uffd9\064\uffd9\065" +
    "\uffd9\066\067\001\002\000\036\004\uffd8\005\uffd8\020\065" +
    "\021\uffd8\050\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\057" +
    "\071\060\uffd8\064\uffd8\065\uffd8\066\uffd8\001\002\000\036" +
    "\004\uffda\005\uffda\020\065\021\uffda\050\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\057\071\060\uffda\064\uffda\065\070" +
    "\066\067\001\002\000\036\004\uffd7\005\uffd7\020\uffd7\021" +
    "\uffd7\050\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\057\071" +
    "\060\uffd7\064\uffd7\065\uffd7\066\uffd7\001\002\000\036\004" +
    "\uffdb\005\uffdb\020\065\021\uffdb\050\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\057\071\060\uffdb\064\066\065\070\066" +
    "\067\001\002\000\004\061\124\001\002\000\024\014\053" +
    "\017\045\035\044\051\062\052\uffa2\061\050\063\055\067" +
    "\057\070\051\001\002\000\030\004\075\005\073\020\065" +
    "\021\064\052\uffa4\053\074\054\uffa4\057\071\064\066\065" +
    "\070\066\067\001\002\000\004\052\115\001\002\000\036" +
    "\004\uffa5\005\uffa5\020\uffa5\021\uffa5\050\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\057\uffa5\060\uffa5\064\uffa5\065\uffa5" +
    "\066\uffa5\001\002\000\006\052\uff9f\054\117\001\002\000" +
    "\022\014\053\017\045\035\044\051\062\061\050\063\055" +
    "\067\057\070\051\001\002\000\004\052\uffa3\001\002\000" +
    "\030\004\075\005\073\020\065\021\064\052\uffa1\053\074" +
    "\054\uffa1\057\071\064\066\065\070\066\067\001\002\000" +
    "\006\052\uff9f\054\117\001\002\000\004\052\uffa0\001\002" +
    "\000\040\004\uffc8\005\uffc8\020\uffc8\021\uffc8\050\uffc8\051" +
    "\126\052\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\060\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\001\002\000\036\004\uffcb\005" +
    "\uffcb\020\uffcb\021\uffcb\050\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\057\uffcb\060\uffcb\064\uffcb\065\uffcb\066\uffcb\001" +
    "\002\000\004\052\127\001\002\000\036\004\uffc9\005\uffc9" +
    "\020\uffc9\021\uffc9\050\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\057\uffc9\060\uffc9\064\uffc9\065\uffc9\066\uffc9\001\002" +
    "\000\006\050\uffb6\054\uffb6\001\002\000\030\004\075\005" +
    "\073\020\065\021\064\050\uffb7\053\074\054\uffb7\057\071" +
    "\064\066\065\070\066\067\001\002\000\006\050\uffb3\054" +
    "\133\001\002\000\024\014\053\017\045\035\044\047\046" +
    "\051\062\061\050\063\055\067\057\070\051\001\002\000" +
    "\004\050\135\001\002\000\010\050\uffb8\054\uffb8\055\uffb8" +
    "\001\002\000\004\050\uffb1\001\002\000\026\004\075\005" +
    "\073\020\065\021\064\050\uffb2\053\074\057\071\064\066" +
    "\065\070\066\067\001\002\000\004\050\uffb4\001\002\000" +
    "\036\004\075\005\073\020\065\021\064\050\uffd5\052\uffd5" +
    "\053\074\054\uffd5\055\uffd5\057\071\060\uffd5\064\066\065" +
    "\070\066\067\001\002\000\004\061\143\001\002\000\040" +
    "\004\uffc8\005\uffc8\020\uffc8\021\uffc8\050\uffc8\051\126\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\060\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\001\002\000\036\004\uffca\005\uffca\020" +
    "\uffca\021\uffca\050\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\057\uffca\060\uffca\064\uffca\065\uffca\066\uffca\001\002\000" +
    "\010\053\uffbe\054\uffbe\055\uffbe\001\002\000\010\053\uffb9" +
    "\054\036\055\uffb9\001\002\000\006\053\042\055\uffc1\001" +
    "\002\000\004\055\uffbd\001\002\000\034\031\uffc3\032\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043" +
    "\uffc3\044\uffc3\046\uffc3\061\uffc3\062\uffc3\001\002\000\004" +
    "\061\325\001\002\000\010\031\ufffa\032\ufffa\046\ufffa\001" +
    "\002\000\006\032\155\046\156\001\002\000\004\061\160" +
    "\001\002\000\004\002\uffff\001\002\000\006\032\ufff8\046" +
    "\ufff8\001\002\000\004\051\ufff6\001\002\000\004\051\162" +
    "\001\002\000\006\052\ufff2\062\164\001\002\000\004\052" +
    "\175\001\002\000\004\061\165\001\002\000\006\052\ufff4" +
    "\054\ufff4\001\002\000\006\052\uffef\054\170\001\002\000" +
    "\004\052\ufff3\001\002\000\004\062\171\001\002\000\004" +
    "\061\172\001\002\000\006\052\ufff1\054\ufff1\001\002\000" +
    "\006\052\uffef\054\170\001\002\000\004\052\ufff0\001\002" +
    "\000\014\016\177\027\201\030\176\033\uffeb\045\uffeb\001" +
    "\002\000\014\016\177\027\201\030\176\033\uffeb\045\uffeb" +
    "\001\002\000\014\016\177\027\201\030\176\033\uffeb\045" +
    "\uffeb\001\002\000\006\033\204\045\uffe9\001\002\000\014" +
    "\016\177\027\201\030\176\033\uffeb\045\uffeb\001\002\000" +
    "\006\033\uffee\045\uffee\001\002\000\004\045\211\001\002" +
    "\000\004\051\205\001\002\000\004\062\206\001\002\000" +
    "\004\061\207\001\002\000\004\052\210\001\002\000\004" +
    "\045\uffea\001\002\000\030\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\041\ufffb\043\ufffb\044\ufffb\046\ufffb\061\ufffb" +
    "\062\ufffb\001\002\000\030\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\046\uffdf\061\uffdf" +
    "\062\024\001\002\000\026\034\221\035\044\036\217\037" +
    "\226\040\231\041\220\043\214\044\222\046\232\061\224" +
    "\001\002\000\004\055\322\001\002\000\026\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7\044\uffe7" +
    "\046\uffe7\061\uffe7\001\002\000\026\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\043\uffe6\044\uffe6\046\uffe6" +
    "\061\uffe6\001\002\000\004\051\uff9e\001\002\000\004\051" +
    "\276\001\002\000\022\014\053\017\045\035\044\051\062" +
    "\061\050\063\055\067\057\070\051\001\002\000\004\055" +
    "\273\001\002\000\026\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\043\uffe8\044\uffe8\046\uffe8\061\uffe8\001" +
    "\002\000\010\051\112\053\uffaa\056\111\001\002\000\004" +
    "\053\270\001\002\000\004\045\257\001\002\000\026\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4" +
    "\044\uffe4\046\uffe4\061\uffe4\001\002\000\004\055\256\001" +
    "\002\000\004\051\234\001\002\000\006\032\ufff5\046\ufff5" +
    "\001\002\000\026\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\043\uffe5\044\uffe5\046\uffe5\061\uffe5\001\002" +
    "\000\006\035\044\061\236\001\002\000\022\014\053\017" +
    "\045\035\044\051\062\061\050\063\055\067\057\070\051" +
    "\001\002\000\006\053\uffaa\056\111\001\002\000\004\053" +
    "\240\001\002\000\024\014\053\017\045\035\044\047\046" +
    "\051\062\061\050\063\055\067\057\070\051\001\002\000" +
    "\004\055\uffa6\001\002\000\004\055\244\001\002\000\026" +
    "\004\075\005\073\020\065\021\064\053\074\055\uffa7\057" +
    "\071\064\066\065\070\066\067\001\002\000\042\014\uffa9" +
    "\017\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\043\uffa9\044\uffa9\046\uffa9\051\uffa9\061\uffa9\063\uffa9" +
    "\067\uffa9\070\uffa9\001\002\000\026\004\075\005\073\020" +
    "\065\021\064\053\074\055\uff9b\057\071\064\066\065\070" +
    "\066\067\001\002\000\004\055\247\001\002\000\022\014" +
    "\053\017\045\035\044\051\062\061\050\063\055\067\057" +
    "\070\051\001\002\000\026\004\075\005\073\020\065\021" +
    "\064\052\uff9a\053\074\057\071\064\066\065\070\066\067" +
    "\001\002\000\004\052\252\001\002\000\004\045\253\001" +
    "\002\000\026\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\043\uffdf\044\uffdf\046\uffdf\061\uffdf\001\002\000" +
    "\026\034\221\035\044\036\217\037\226\040\231\041\220" +
    "\043\214\044\222\046\255\061\224\001\002\000\026\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\043\uff99" +
    "\044\uff99\046\uff99\061\uff99\001\002\000\026\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3\044\uffe3" +
    "\046\uffe3\061\uffe3\001\002\000\026\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\046\uffdf" +
    "\061\uffdf\001\002\000\026\034\221\035\044\036\217\037" +
    "\226\040\231\041\220\043\214\044\222\046\261\061\224" +
    "\001\002\000\004\036\262\001\002\000\004\051\263\001" +
    "\002\000\022\014\053\017\045\035\044\051\062\061\050" +
    "\063\055\067\057\070\051\001\002\000\026\004\075\005" +
    "\073\020\065\021\064\052\uff98\053\074\057\071\064\066" +
    "\065\070\066\067\001\002\000\004\052\266\001\002\000" +
    "\004\055\267\001\002\000\026\034\uff97\035\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\043\uff97\044\uff97\046\uff97\061" +
    "\uff97\001\002\000\024\014\053\017\045\035\044\047\046" +
    "\051\062\061\050\063\055\067\057\070\051\001\002\000" +
    "\004\055\272\001\002\000\042\014\uffa8\017\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\043\uffa8\044" +
    "\uffa8\046\uffa8\051\uffa8\061\uffa8\063\uffa8\067\uffa8\070\uffa8" +
    "\001\002\000\026\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\043\uffe0\044\uffe0\046\uffe0\061\uffe0\001\002" +
    "\000\026\004\075\005\073\020\065\021\064\053\074\055" +
    "\275\057\071\064\066\065\070\066\067\001\002\000\026" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\043" +
    "\uffe2\044\uffe2\046\uffe2\061\uffe2\001\002\000\022\014\053" +
    "\017\045\035\044\051\062\061\050\063\055\067\057\070" +
    "\051\001\002\000\026\004\075\005\073\020\065\021\064" +
    "\052\uff96\053\074\057\071\064\066\065\070\066\067\001" +
    "\002\000\004\052\301\001\002\000\004\045\302\001\002" +
    "\000\026\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\043\uffdf\044\uffdf\046\uffdf\061\uffdf\001\002\000\026" +
    "\034\221\035\044\036\217\037\226\040\231\041\220\043" +
    "\214\044\222\046\304\061\224\001\002\000\030\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\306\043" +
    "\uff93\044\uff93\046\uff93\061\uff93\001\002\000\026\034\uff95" +
    "\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\043\uff95\044" +
    "\uff95\046\uff95\061\uff95\001\002\000\004\045\307\001\002" +
    "\000\026\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\043\uffdf\044\uffdf\046\uffdf\061\uffdf\001\002\000\026" +
    "\034\221\035\044\036\217\037\226\040\231\041\220\043" +
    "\214\044\222\046\311\061\224\001\002\000\026\034\uff94" +
    "\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\043\uff94\044" +
    "\uff94\046\uff94\061\uff94\001\002\000\004\051\313\001\002" +
    "\000\022\014\053\017\045\035\044\051\062\061\050\063" +
    "\055\067\057\070\051\001\002\000\026\004\075\005\073" +
    "\020\065\021\064\052\uff9d\053\074\057\071\064\066\065" +
    "\070\066\067\001\002\000\004\052\316\001\002\000\004" +
    "\045\317\001\002\000\026\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\046\uffdf\061\uffdf" +
    "\001\002\000\026\034\221\035\044\036\217\037\226\040" +
    "\231\041\220\043\214\044\222\046\321\061\224\001\002" +
    "\000\026\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\043\uff9c\044\uff9c\046\uff9c\061\uff9c\001\002\000\026" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\043" +
    "\uffe1\044\uffe1\046\uffe1\061\uffe1\001\002\000\006\033\uffec" +
    "\045\uffec\001\002\000\006\033\uffed\045\uffed\001\002\000" +
    "\004\045\326\001\002\000\004\062\024\001\002\000\006" +
    "\046\uffab\062\uffab\001\002\000\006\046\332\062\024\001" +
    "\002\000\006\046\uffac\062\uffac\001\002\000\010\031\uffad" +
    "\032\uffad\046\uffad\001\002\000\004\045\334\001\002\000" +
    "\004\061\336\001\002\000\006\046\340\054\337\001\002" +
    "\000\006\046\uffc5\054\uffc5\001\002\000\004\061\341\001" +
    "\002\000\014\026\uffc7\031\uffc7\032\uffc7\046\uffc7\062\uffc7" +
    "\001\002\000\006\046\uffc6\054\uffc6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\026\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\015\001\001" +
    "\000\006\004\020\030\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\022\031\021\001\001\000\002" +
    "\001\001\000\006\006\153\032\152\001\001\000\004\055" +
    "\024\001\001\000\006\011\027\045\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\034" +
    "\001\001\000\004\043\042\001\001\000\002\001\001\000" +
    "\004\057\037\001\001\000\004\002\040\001\001\000\002" +
    "\001\001\000\016\013\046\024\051\035\053\044\057\047" +
    "\060\051\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\051\035\053\047\060\051\140\001\001\000" +
    "\016\012\131\013\127\024\051\035\053\047\060\051\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\051\035\053" +
    "\047\060\051\062\001\001\000\002\001\001\000\012\024" +
    "\051\035\053\047\060\051\107\001\001\000\012\024\051" +
    "\035\053\047\060\051\106\001\001\000\012\024\051\035" +
    "\053\047\060\051\105\001\001\000\012\024\051\035\053" +
    "\047\060\051\104\001\001\000\012\024\051\035\053\047" +
    "\060\051\103\001\001\000\012\024\051\035\053\047\060" +
    "\051\100\001\001\000\002\001\001\000\012\024\051\035" +
    "\053\047\060\051\077\001\001\000\012\024\051\035\053" +
    "\047\060\051\076\001\001\000\012\024\051\035\053\047" +
    "\060\051\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\051\035" +
    "\053\047\060\051\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\113" +
    "\024\051\035\053\047\060\051\112\001\001\000\004\061" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\117\001\001\000\012\024\051\035\053\047\060\051" +
    "\120\001\001\000\002\001\001\000\004\062\121\001\001" +
    "\000\004\017\122\001\001\000\002\001\001\000\004\025" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\133\001\001\000\016\013\135\023\137\024\051\035\053" +
    "\047\060\051\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\143\001" +
    "\001\000\002\001\001\000\004\056\145\001\001\000\004" +
    "\002\146\001\001\000\004\043\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\160\001\001\000\002" +
    "\001\001\000\004\015\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\165\001\001\000\004\021\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\172\001\001\000\004\021\173\001\001" +
    "\000\002\001\001\000\004\007\177\001\001\000\004\007" +
    "\323\001\001\000\004\007\322\001\001\000\004\046\202" +
    "\001\001\000\004\007\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\211\001\001\000\006\031\021\050\212\001\001\000\020" +
    "\024\224\034\222\035\227\036\214\037\215\040\232\041" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\311\001\001\000\002\001\001\000" +
    "\012\024\051\035\053\047\060\051\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\224\034\234\001\001\000\012\024\051" +
    "\035\053\047\060\051\244\001\001\000\004\060\236\001" +
    "\001\000\002\001\001\000\016\013\240\020\241\024\051" +
    "\035\053\047\060\051\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\245\001\001\000\002\001\001\000\012\024\051\035" +
    "\053\047\060\051\247\001\001\000\004\066\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\253\001" +
    "\001\000\020\024\224\034\222\035\227\036\214\037\215" +
    "\040\232\041\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\257\001\001\000\020\024\224\034\222" +
    "\035\227\036\214\037\215\040\232\041\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\051\035\053" +
    "\047\060\051\263\001\001\000\004\067\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\240\020\270\024\051\035\053\047\060\051\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\051\035" +
    "\053\047\060\051\276\001\001\000\004\070\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\302\001" +
    "\001\000\020\024\224\034\222\035\227\036\214\037\215" +
    "\040\232\041\226\001\001\000\004\042\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\307\001\001" +
    "\000\020\024\224\034\222\035\227\036\214\037\215\040" +
    "\232\041\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\051\035\053\047\060\051\313\001\001\000" +
    "\004\064\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\317\001\001\000\020\024\224\034\222\035" +
    "\227\036\214\037\215\040\232\041\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\327\031\326\001\001" +
    "\000\002\001\001\000\004\031\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error No Recuperable de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    //String tmp="";
    TablaSimbolos tablaSimbolos = new TablaSimbolos();
    PilaSemantica pila = new PilaSemantica();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= Pragma Solidity Version Semicolon CONTRACT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTRACT ::= Contract Identifier O_Braces Enums Variables Structs Functions C_Braces 
            {
              Object RESULT =null;
		
    System.out.println(tablaSimbolos.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTRACT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Enums ::= Enums ENUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Enums",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Enums ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Enums",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Variables ::= Variables VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Structs ::= Structs STRUCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Structs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Structs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Structs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Functions ::= Functions FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Functions",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Functions",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RS_Funcion reg = new RS_Funcion(ident);
                                        pila.push(reg);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCTION ::= Function Identifier NT$0 O_Parentheses Function_Parameters C_Parentheses Modifiers RETURNS O_Braces Variables SENTENCIAS C_Braces 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
TokenVar t = new TokenVar();
                                                        t.setNombre(ident);
                                                        t.setTipo(type);
                                                        t.setSubclase("variable (parametro)");
                                                        t.setAlcance(pila.buscarAlcance());
                                                        t.setValor("");
                                                        if(tablaSimbolos.buscarTokenVariable(t)){
                                                            System.out.println("El parametro " + t.getNombre() + " ya fue declarado");
                                                        }else{
                                                            tablaSimbolos.agregarToken(t);
                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Function_Parameters ::= Var_Type Identifier NT$1 Function_Parameters_PRIMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Function_Parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
TokenVar t = new TokenVar();
                                                                    t.setNombre(ident);
                                                                    t.setTipo(type);
                                                                    t.setSubclase("variable (parametro)");
                                                                    t.setAlcance(pila.buscarAlcance());
                                                                    t.setValor("");
                                                                    if(tablaSimbolos.buscarTokenVariable(t)){
                                                                        System.out.println("El parametro " + t.getNombre() + " ya fue declarado");
                                                                    }else{
                                                                        tablaSimbolos.agregarToken(t);
                                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Function_Parameters_PRIMA ::= Comma Var_Type Identifier NT$2 Function_Parameters_PRIMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters_PRIMA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Function_Parameters_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters_PRIMA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Modifiers ::= Public Modifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Modifiers ::= Private Modifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Modifiers ::= Modifier Modifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Modifiers ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RETURNS ::= Returns O_Parentheses Var_Type Identifier C_Parentheses 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RETURNS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= SENTENCIAS ASIGNATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= SENTENCIAS WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= SENTENCIAS FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= SENTENCIAS DO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS ::= SENTENCIAS IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS ::= SENTENCIAS FUNC_CALL Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAS ::= SENTENCIAS Return expression Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS ::= SENTENCIAS Break Semicolon 
            {
              Object RESULT =null;
		 if(!pila.buscarWhile()){
                                                                                                                                                                                                                    System.out.println("Se está usando un break fuera de los bloques permitidos");
                                                                                                                                                                                                                } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= SENTENCIAS Continue Semicolon 
            {
              Object RESULT =null;
		 if(!pila.buscarWhile()){
                                                                                                                                                                                                                                                            System.out.println("Se está usando un continue fuera de los bloques permitidos");
                                                                                                                                                                                                                                                        } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression Or expression 
            {
              String RESULT =null;
		RS_DO reg3 = (RS_DO)pila.pop();
                                        RS_DO reg1 = (RS_DO)pila.pop();
                                        if(reg1.getTipo().equals(reg3.getTipo()) && reg1.getTipo().equals("bool")){
                                            String str = reg1.getValor() + "||" + reg3.getValor();
                                            RS_DO reg = new RS_DO(str);
                                            reg.setTipo("bool");
                                            pila.push(reg);
                                        }else{
                                            System.out.println("Error de tipos en la operación Or");
                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression And expression 
            {
              String RESULT =null;
		RS_DO reg3 = (RS_DO)pila.pop();
                                                                        RS_DO reg1 = (RS_DO)pila.pop();
                                                                        if(reg1.getTipo().equals(reg3.getTipo()) && reg1.getTipo().equals("bool")){
                                                                            String str = reg1.getValor() + "&&" + reg3.getValor();
                                                                            RS_DO reg = new RS_DO(str);
                                                                            reg.setTipo("bool");
                                                                            pila.push(reg);
                                                                        }else{
                                                                            System.out.println("Error de tipos en la operación And");
                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression Equal expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression Equals expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression Same_Different_Op expression 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RS_DO reg3 = (RS_DO)pila.pop();
                                                                                                                                                                                        RS_DO reg1 = (RS_DO)pila.pop();
                                                                                                                                                                                        if(reg1.getTipo().equals(reg3.getTipo()) && reg1.getTipo().equals("bool")){
                                                                                                                                                                                            String str = reg1.getValor() + op + reg3.getValor();
                                                                                                                                                                                            RS_DO reg = new RS_DO(str);
                                                                                                                                                                                            reg.setTipo("bool");
                                                                                                                                                                                            pila.push(reg);
                                                                                                                                                                                        }else{
                                                                                                                                                                                            System.out.println("Error de tipos en la operación de comparación");
                                                                                                                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression Greater_Lesser_Op expression 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RS_DO reg3 = (RS_DO)pila.pop();
                                                                                                                                                                                                                                            RS_DO reg1 = (RS_DO)pila.pop();
                                                                                                                                                                                                                                            if(reg1.getTipo().equals(reg3.getTipo()) && reg1.getTipo().equals("int")){
                                                                                                                                                                                                                                                String str = reg1.getValor() + op + reg3.getValor();
                                                                                                                                                                                                                                                RS_DO reg = new RS_DO(str);
                                                                                                                                                                                                                                                reg.setTipo("bool");
                                                                                                                                                                                                                                                pila.push(reg);
                                                                                                                                                                                                                                            }else{
                                                                                                                                                                                                                                                System.out.println("Error de tipos en la operación de comparación");
                                                                                                                                                                                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression Least_Important_Op expression 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RS_DO reg3 = (RS_DO)pila.pop();
                                                                                                                                                                                                                                                                                            RS_DO reg1 = (RS_DO)pila.pop();
                                                                                                                                                                                                                                                                                            if(reg1.getTipo().equals(reg3.getTipo()) && reg1.getTipo().equals("int")){
                                                                                                                                                                                                                                                                                                if(reg1.getTipoRS().equals("constante") && reg3.getTipoRS().equals("constante")){
                                                                                                                                                                                                                                                                                                    if(op.equals("+")){
                                                                                                                                                                                                                                                                                                        int num1 = Integer.parseInt(reg1.getValor());
                                                                                                                                                                                                                                                                                                        int num2 = Integer.parseInt(reg3.getValor());
                                                                                                                                                                                                                                                                                                        int result = num1 + num2;
                                                                                                                                                                                                                                                                                                        RS_DO reg = new RS_DO(Integer.toString(result),"int");
                                                                                                                                                                                                                                                                                                        pila.push(reg);
                                                                                                                                                                                                                                                                                                    }else{
                                                                                                                                                                                                                                                                                                        int num1 = Integer.parseInt(reg1.getValor());
                                                                                                                                                                                                                                                                                                        int num2 = Integer.parseInt(reg3.getValor());
                                                                                                                                                                                                                                                                                                        int result = num1 - num2;
                                                                                                                                                                                                                                                                                                        RS_DO reg = new RS_DO(Integer.toString(result),"int");
                                                                                                                                                                                                                                                                                                        pila.push(reg);
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }else{
                                                                                                                                                                                                                                                                                                    String str = reg1.getValor() + op + reg3.getValor();
                                                                                                                                                                                                                                                                                                    RS_DO reg = new RS_DO(str);
                                                                                                                                                                                                                                                                                                    reg.setTipo("int");
                                                                                                                                                                                                                                                                                                    pila.push(reg);
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }else{
                                                                                                                                                                                                                                                                                                System.out.println("Error de tipos en la operación aritmetica");
                                                                                                                                                                                                                                                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression Most_Important_Op expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression QuestionMark expression Colon expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= ExclamationMark expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= O_Parentheses expression C_Parentheses 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= primaryExpression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primaryExpression ::= Number 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RS_DO reg = new RS_DO(num,"int");
                                pila.push(reg);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primaryExpression ::= Hexadecimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primaryExpression ::= String 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RS_DO reg = new RS_DO(str,"string");
                                                                            pila.push(reg);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primaryExpression ::= Boolean_Value 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RS_DO reg = new RS_DO(bool,"bool");
                                                                                                                    pila.push(reg);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // primaryExpression ::= FUNC_CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // primaryExpression ::= Identifier 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!tablaSimbolos.buscarVariable(ident,pila.buscarAlcance())){
                                                                                                                                                                            System.out.println("La variable " + ident + " no está definida en el scope");
                                                                                                                                                                        }else{
                                                                                                                                                                            RS_DO reg = new RS_DO("",ident,tablaSimbolos.buscarTipoVariable(ident,pila.buscarAlcance()));
                                                                                                                                                                            pila.push(reg);
                                                                                                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // primaryExpression ::= Body_Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Body_Identifier ::= Identifier Period Identifier Body_Identifier_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Body_Identifier ::= This Period Identifier Body_Identifier_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Body_Identifier_PRIMA ::= O_Parentheses C_Parentheses 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier_PRIMA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Body_Identifier_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier_PRIMA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ENUM ::= Enum Identifier O_Braces EnumIds C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENUM",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EnumIds ::= EnumIds Comma Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EnumIds",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EnumIds ::= Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EnumIds",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$3 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RS_Tipo reg = new RS_Tipo(type);
                        pila.push(reg);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VAR ::= Var_Type NT$3 Var_PRIMA_PRIMA Semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String value = "";
                                                     if(pila.top().getTipoRS().equals("constante") || pila.top().getTipoRS().equals("expresion") || pila.top().getTipoRS().equals("direccion")){
                                                        RS_DO reg = (RS_DO) pila.top();
                                                        value = reg.getValor();
                                                        if(!reg.getTipo().equals(pila.buscarRSTipo())){
                                                            System.out.println("Error en la declaración de variables: Los tipos de datos no son iguales");
                                                        }
                                                        pila.pop();
                                                     }
                                                     while(!pila.top().getTipoRS().equals("tipo")){
                                                         RS_ID reg = (RS_ID) pila.pop();
                                                         TokenVar t = new TokenVar();
                                                         t.setTipo(pila.buscarRSTipo());
                                                         t.setSubclase("variable");
                                                         t.setAlcance(pila.buscarAlcance());
                                                         t.setNombre(reg.getNombre());
                                                         t.setValor(value);
                                                         if(tablaSimbolos.buscarTokenVariable(t)){
                                                             System.out.println("La variable " + reg.getNombre() + " ya fue declarada");
                                                         }else{
                                                             tablaSimbolos.agregarToken(t);
                                                         }
                                                     }
                                                     pila.pop();
                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAR_PRIMA ::= Equal VAR_PRIMA_PRIMA_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAR_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAR_PRIMA_PRIMA_PRIMA ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA_PRIMA_PRIMA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAR_PRIMA_PRIMA_PRIMA ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA_PRIMA_PRIMA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$4 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RS_ID reg = new RS_ID(ident);
                                                pila.push(reg);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Var_PRIMA_PRIMA ::= Privacy Identifier NT$4 OTHER_IDENT VAR_PRIMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_PRIMA_PRIMA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Var_PRIMA_PRIMA ::= O_Brackets C_Brackets Identifier OTHER_IDENT VAR_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_PRIMA_PRIMA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$5 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RS_ID reg = new RS_ID(ident);
                                          pila.push(reg);
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OTHER_IDENT ::= Comma Identifier NT$5 OTHER_IDENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTHER_IDENT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OTHER_IDENT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTHER_IDENT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Array ::= O_Brackets ArrayValue ArrayValue_PRIMA C_Brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Array",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ArrayValue ::= expression 
            {
              Object RESULT =null;
		pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ArrayValue ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ArrayValue ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ArrayValue_PRIMA ::= Comma ArrayValue_PRIMA_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ArrayValue_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ArrayValue_PRIMA_PRIMA ::= expression 
            {
              Object RESULT =null;
		pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA_PRIMA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ArrayValue_PRIMA_PRIMA ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA_PRIMA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Privacy ::= Public 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Privacy",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Privacy ::= Private 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Privacy",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Privacy ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Privacy",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STRUCT ::= Struct Identifier O_Braces StructVar C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCT",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // StructVar ::= StructVar VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StructVar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // StructVar ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StructVar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$6 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!tablaSimbolos.buscarVariable(ident,pila.buscarAlcance())){
                                    System.out.println("La variable " + ident + " no está definida en el scope");
                                }else{
                                    RS_Tipo reg = new RS_Tipo(tablaSimbolos.buscarTipoVariable(ident, pila.buscarAlcance()));
                                    pila.push(reg);
                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNATION ::= Identifier NT$6 Equal ASIGNATION_PRIMA Semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RS_DO reg = (RS_DO) pila.top();
                                                                        if(!reg.getTipo().equals(pila.buscarRSTipo())){
                                                                            System.out.println("Error en la declaración de variables: Los tipos de datos no son iguales");
                                                                        }
                                                                        pila.pop();
                                                                        pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNATION ::= Body_Identifier Equal ASIGNATION_PRIMA Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNATION_PRIMA ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION_PRIMA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNATION_PRIMA ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION_PRIMA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNC_CALL ::= Identifier O_Parentheses FUNC_CALL_PARAMETERS C_Parentheses 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$7 ::= 
            {
              Object RESULT =null;
pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNC_CALL_PARAMETERS ::= expression NT$7 FUNC_CALL_PARAMETERS_PRIMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNC_CALL_PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$8 ::= 
            {
              Object RESULT =null;
pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNC_CALL_PARAMETERS_PRIMA ::= Comma expression NT$8 FUNC_CALL_PARAMETERS_PRIMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS_PRIMA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNC_CALL_PARAMETERS_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS_PRIMA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$9 ::= 
            {
              Object RESULT =null;
RS_While reg = new RS_While();
                pila.push(reg);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
RS_DO reg = (RS_DO)pila.pop();
                                                            if(!reg.getTipo().equals("bool")){
                                                                System.out.println("Error en la declaración del While: La expresión debe ser booleana");
                                                            }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // WHILE ::= While NT$9 O_Parentheses expression NT$10 C_Parentheses O_Braces SENTENCIAS C_Braces 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$11 ::= 
            {
              Object RESULT =null;
pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FOR ::= For O_Parentheses ASIGNATION expression NT$11 Semicolon expression NT$12 C_Parentheses O_Braces SENTENCIAS C_Braces 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$13 ::= 
            {
              Object RESULT =null;
pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DO ::= Do O_Braces SENTENCIAS C_Braces While O_Parentheses expression NT$13 C_Parentheses Semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$14 ::= 
            {
              Object RESULT =null;
RS_DO reg = (RS_DO)pila.pop();
                                    if(!reg.getTipo().equals("bool")){
                                        System.out.println("Error en la declaración del While: La expresión debe ser booleana");
                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IF ::= If O_Parentheses expression NT$14 C_Parentheses O_Braces SENTENCIAS C_Braces ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELSE ::= Else O_Braces SENTENCIAS C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
