
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectoCompilador;

import java_cup.runtime.Symbol;
import semantica.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\026\007\000\002\027" +
    "\012\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\002\000\002\052\002\000\002" +
    "\033\016\000\002\053\002\000\002\015\006\000\002\015" +
    "\002\000\002\054\002\000\002\021\007\000\002\021\002" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\002\000\002\046\007\000\002\046\002\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\005\000\002\050\006" +
    "\000\002\050\005\000\002\050\005\000\002\050\002\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\007\000\002\051\004" +
    "\000\002\051\005\000\002\051\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\024" +
    "\006\000\002\024\006\000\002\025\004\000\002\025\002" +
    "\000\002\030\007\000\002\010\005\000\002\010\003\000" +
    "\002\055\002\000\002\031\006\000\002\043\004\000\002" +
    "\043\002\000\002\044\003\000\002\044\003\000\002\056" +
    "\002\000\002\045\007\000\002\045\007\000\002\057\002" +
    "\000\002\002\006\000\002\002\002\000\002\013\006\000" +
    "\002\012\003\000\002\012\003\000\002\012\002\000\002" +
    "\022\004\000\002\022\002\000\002\023\003\000\002\023" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\002" +
    "\000\002\032\007\000\002\014\004\000\002\014\003\000" +
    "\002\060\002\000\002\034\007\000\002\034\006\000\002" +
    "\020\003\000\002\020\003\000\002\035\006\000\002\016" +
    "\004\000\002\016\002\000\002\017\005\000\002\017\002" +
    "\000\002\061\002\000\002\036\012\000\002\037\014\000" +
    "\002\040\013\000\002\041\012\000\002\042\006\000\002" +
    "\042\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\004\030\004\001\002\000\004\031\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\014\010\001\002\000\004\063\011\001\002\000" +
    "\004\033\013\001\002\000\004\002\000\001\002\000\004" +
    "\067\014\001\002\000\004\053\015\001\002\000\014\034" +
    "\ufffd\037\ufffd\040\ufffd\054\ufffd\070\ufffd\001\002\000\014" +
    "\034\020\037\ufffb\040\ufffb\054\ufffb\070\ufffb\001\002\000" +
    "\014\034\ufffe\037\ufffe\040\ufffe\054\ufffe\070\ufffe\001\002" +
    "\000\004\067\324\001\002\000\012\037\ufff9\040\ufff9\054" +
    "\ufff9\070\024\001\002\000\034\037\ufffc\040\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\051\ufffc\052" +
    "\ufffc\054\ufffc\067\ufffc\070\ufffc\001\002\000\010\037\150" +
    "\040\ufff7\054\ufff7\001\002\000\012\035\uffc4\036\uffc4\055" +
    "\uffc4\067\uffc4\001\002\000\012\035\031\036\026\055\032" +
    "\067\uffae\001\002\000\004\067\uffaf\001\002\000\004\063" +
    "\147\001\002\000\004\067\143\001\002\000\004\067\uffb0" +
    "\001\002\000\004\056\033\001\002\000\004\067\034\001" +
    "\002\000\010\061\uffb9\062\036\063\uffb9\001\002\000\006" +
    "\061\042\063\uffc1\001\002\000\004\067\037\001\002\000" +
    "\010\061\uffbb\062\uffbb\063\uffbb\001\002\000\010\061\uffb9" +
    "\062\036\063\uffb9\001\002\000\006\061\uffba\063\uffba\001" +
    "\002\000\024\012\057\013\053\015\051\017\055\020\045" +
    "\043\044\055\046\057\062\067\050\001\002\000\004\063" +
    "\uffbc\001\002\000\004\064\140\001\002\000\022\012\057" +
    "\013\053\015\051\017\055\020\045\043\044\057\062\067" +
    "\050\001\002\000\030\012\057\013\053\015\051\017\055" +
    "\020\045\043\044\055\046\056\uffb5\057\062\062\uffb5\067" +
    "\050\001\002\000\004\063\uffbf\001\002\000\042\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\056" +
    "\uffcd\057\112\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\111" +
    "\065\uffcd\066\uffcd\001\002\000\036\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\056\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\063\uffcf\065\uffcf\066\uffcf\001\002\000" +
    "\036\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\056\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\065" +
    "\uffcc\066\uffcc\001\002\000\036\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\056\uffd1\060\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\065\uffd1\066\uffd1\001\002\000\036" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\056\uffce\060\uffce\061\uffce\062\uffce\063\uffce\065\uffce" +
    "\066\uffce\001\002\000\036\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\056\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\065\uffd2\066\uffd2\001\002\000\026\021" +
    "\073\022\075\023\065\024\067\025\070\026\066\027\064" +
    "\061\074\063\uffc0\065\071\001\002\000\036\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\056\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\066\uffd0\001" +
    "\002\000\004\063\uffc2\001\002\000\036\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\056\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\065\uffd3\066\uffd3\001\002" +
    "\000\022\012\057\013\053\015\051\017\055\020\045\043" +
    "\044\057\062\067\050\001\002\000\026\021\073\022\075" +
    "\023\065\024\067\025\070\026\066\027\064\060\072\061" +
    "\074\065\071\001\002\000\022\012\057\013\053\015\051" +
    "\017\055\020\045\043\044\057\062\067\050\001\002\000" +
    "\022\012\057\013\053\015\051\017\055\020\045\043\044" +
    "\057\062\067\050\001\002\000\022\012\057\013\053\015" +
    "\051\017\055\020\045\043\044\057\062\067\050\001\002" +
    "\000\022\012\057\013\053\015\051\017\055\020\045\043" +
    "\044\057\062\067\050\001\002\000\022\012\057\013\053" +
    "\015\051\017\055\020\045\043\044\057\062\067\050\001" +
    "\002\000\022\012\057\013\053\015\051\017\055\020\045" +
    "\043\044\057\062\067\050\001\002\000\036\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\056\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\065\uffd4\066\uffd4\001" +
    "\002\000\022\012\057\013\053\015\051\017\055\020\045" +
    "\043\044\057\062\067\050\001\002\000\022\012\057\013" +
    "\053\015\051\017\055\020\045\043\044\057\062\067\050" +
    "\001\002\000\022\012\057\013\053\015\051\017\055\020" +
    "\045\043\044\057\062\067\050\001\002\000\036\021\073" +
    "\022\uffde\023\065\024\067\025\070\026\066\027\064\056" +
    "\uffde\060\uffde\061\074\062\uffde\063\uffde\065\071\066\uffde" +
    "\001\002\000\036\021\uffdc\022\uffdc\023\065\024\067\025" +
    "\070\026\066\027\064\056\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\065\071\066\uffdc\001\002\000\036\021\uffdd\022" +
    "\uffdd\023\065\024\067\025\070\026\066\027\064\056\uffdd" +
    "\060\uffdd\061\074\062\uffdd\063\uffdd\065\071\066\uffdd\001" +
    "\002\000\026\021\073\022\075\023\065\024\067\025\070" +
    "\026\066\027\064\061\074\065\071\066\102\001\002\000" +
    "\022\012\057\013\053\015\051\017\055\020\045\043\044" +
    "\057\062\067\050\001\002\000\036\021\073\022\075\023" +
    "\065\024\067\025\070\026\066\027\064\056\uffd6\060\uffd6" +
    "\061\074\062\uffd6\063\uffd6\065\071\066\uffd6\001\002\000" +
    "\036\021\uffd9\022\uffd9\023\065\024\067\025\uffd9\026\uffd9" +
    "\027\uffd9\056\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\065" +
    "\071\066\uffd9\001\002\000\036\021\uffd8\022\uffd8\023\065" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\056\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\065\071\066\uffd8\001\002\000\036" +
    "\021\uffda\022\uffda\023\065\024\067\025\070\026\uffda\027" +
    "\uffda\056\uffda\060\uffda\061\uffda\062\uffda\063\uffda\065\071" +
    "\066\uffda\001\002\000\036\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\056\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\065\071\066\uffd7\001\002\000\036\021" +
    "\uffdb\022\uffdb\023\065\024\067\025\070\026\066\027\uffdb" +
    "\056\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\065\071\066" +
    "\uffdb\001\002\000\004\067\122\001\002\000\024\012\057" +
    "\013\053\015\051\017\055\020\045\043\044\057\062\060" +
    "\uffa3\067\050\001\002\000\030\021\073\022\075\023\065" +
    "\024\067\025\070\026\066\027\064\060\uffa1\061\074\062" +
    "\117\065\071\001\002\000\004\060\115\001\002\000\036" +
    "\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027" +
    "\uffa5\056\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\065\uffa5" +
    "\066\uffa5\001\002\000\004\060\uffa4\001\002\000\022\012" +
    "\057\013\053\015\051\017\055\020\045\043\044\057\062" +
    "\067\050\001\002\000\030\021\073\022\075\023\065\024" +
    "\067\025\070\026\066\027\064\060\uffa1\061\074\062\117" +
    "\065\071\001\002\000\004\060\uffa2\001\002\000\040\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\056\uffc8\057\124\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065" +
    "\uffc8\066\uffc8\001\002\000\036\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\056\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\065\uffcb\066\uffcb\001\002\000\004" +
    "\060\125\001\002\000\036\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\056\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\065\uffc9\066\uffc9\001\002\000\006\056" +
    "\uffb6\062\uffb6\001\002\000\030\021\073\022\075\023\065" +
    "\024\067\025\070\026\066\027\064\056\uffb7\061\074\062" +
    "\uffb7\065\071\001\002\000\006\056\uffb3\062\131\001\002" +
    "\000\024\012\057\013\053\015\051\017\055\020\045\043" +
    "\044\055\046\057\062\067\050\001\002\000\004\056\133" +
    "\001\002\000\010\056\uffb8\062\uffb8\063\uffb8\001\002\000" +
    "\004\056\uffb1\001\002\000\026\021\073\022\075\023\065" +
    "\024\067\025\070\026\066\027\064\056\uffb2\061\074\065" +
    "\071\001\002\000\004\056\uffb4\001\002\000\036\021\073" +
    "\022\075\023\065\024\067\025\070\026\066\027\064\056" +
    "\uffd5\060\uffd5\061\074\062\uffd5\063\uffd5\065\071\066\uffd5" +
    "\001\002\000\004\067\141\001\002\000\040\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\056\uffc8" +
    "\057\124\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065\uffc8\066" +
    "\uffc8\001\002\000\036\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\056\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\065\uffca\066\uffca\001\002\000\010\061\uffbe" +
    "\062\uffbe\063\uffbe\001\002\000\010\061\uffb9\062\036\063" +
    "\uffb9\001\002\000\006\061\042\063\uffc1\001\002\000\004" +
    "\063\uffbd\001\002\000\034\037\uffc3\040\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3" +
    "\054\uffc3\067\uffc3\070\uffc3\001\002\000\004\067\316\001" +
    "\002\000\010\037\ufffa\040\ufffa\054\ufffa\001\002\000\006" +
    "\040\153\054\154\001\002\000\004\067\156\001\002\000" +
    "\004\002\uffff\001\002\000\006\040\ufff8\054\ufff8\001\002" +
    "\000\004\057\ufff6\001\002\000\004\057\160\001\002\000" +
    "\006\060\ufff2\070\162\001\002\000\004\060\173\001\002" +
    "\000\004\067\163\001\002\000\006\060\ufff4\062\ufff4\001" +
    "\002\000\006\060\uffef\062\166\001\002\000\004\060\ufff3" +
    "\001\002\000\004\070\167\001\002\000\004\067\170\001" +
    "\002\000\006\060\ufff1\062\ufff1\001\002\000\006\060\uffef" +
    "\062\166\001\002\000\004\060\ufff0\001\002\000\014\016" +
    "\175\035\177\036\174\041\uffeb\053\uffeb\001\002\000\014" +
    "\016\175\035\177\036\174\041\uffeb\053\uffeb\001\002\000" +
    "\014\016\175\035\177\036\174\041\uffeb\053\uffeb\001\002" +
    "\000\006\041\202\053\uffe9\001\002\000\014\016\175\035" +
    "\177\036\174\041\uffeb\053\uffeb\001\002\000\006\041\uffee" +
    "\053\uffee\001\002\000\004\053\207\001\002\000\004\057" +
    "\203\001\002\000\004\070\204\001\002\000\004\067\205" +
    "\001\002\000\004\060\206\001\002\000\004\053\uffea\001" +
    "\002\000\030\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\051\ufffb\052\ufffb\054\ufffb\067\ufffb\070\ufffb\001" +
    "\002\000\030\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\051\uffdf\052\uffdf\054\uffdf\067\uffdf\070\024\001" +
    "\002\000\026\042\217\043\044\044\216\045\224\046\227" +
    "\047\215\051\212\052\220\054\230\067\222\001\002\000" +
    "\004\063\313\001\002\000\026\042\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7\054\uffe7\067" +
    "\uffe7\001\002\000\026\042\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\051\uffe6\052\uffe6\054\uffe6\067\uffe6\001" +
    "\002\000\004\057\300\001\002\000\004\057\uffa0\001\002" +
    "\000\022\012\057\013\053\015\051\017\055\020\045\043" +
    "\044\057\062\067\050\001\002\000\004\063\266\001\002" +
    "\000\026\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\051\uffe8\052\uffe8\054\uffe8\067\uffe8\001\002\000\010" +
    "\057\112\061\uffaa\064\111\001\002\000\004\061\263\001" +
    "\002\000\004\053\253\001\002\000\026\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\054" +
    "\uffe4\067\uffe4\001\002\000\004\063\252\001\002\000\004" +
    "\057\232\001\002\000\006\040\ufff5\054\ufff5\001\002\000" +
    "\026\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\051\uffe5\052\uffe5\054\uffe5\067\uffe5\001\002\000\006\043" +
    "\044\067\234\001\002\000\022\012\057\013\053\015\051" +
    "\017\055\020\045\043\044\057\062\067\050\001\002\000" +
    "\006\061\uffaa\064\111\001\002\000\004\061\236\001\002" +
    "\000\024\012\057\013\053\015\051\017\055\020\045\043" +
    "\044\055\046\057\062\067\050\001\002\000\004\063\uffa6" +
    "\001\002\000\004\063\242\001\002\000\026\021\073\022" +
    "\075\023\065\024\067\025\070\026\066\027\064\061\074" +
    "\063\uffa7\065\071\001\002\000\042\012\uffa9\013\uffa9\015" +
    "\uffa9\017\uffa9\020\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\051\uffa9\052\uffa9\054\uffa9\057\uffa9\067" +
    "\uffa9\001\002\000\026\021\073\022\075\023\065\024\067" +
    "\025\070\026\066\027\064\061\074\063\244\065\071\001" +
    "\002\000\022\012\057\013\053\015\051\017\055\020\045" +
    "\043\044\057\062\067\050\001\002\000\026\021\073\022" +
    "\075\023\065\024\067\025\070\026\066\027\064\060\246" +
    "\061\074\065\071\001\002\000\004\053\247\001\002\000" +
    "\026\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\051\uffdf\052\uffdf\054\uffdf\067\uffdf\001\002\000\026\042" +
    "\217\043\044\044\216\045\224\046\227\047\215\051\212" +
    "\052\220\054\251\067\222\001\002\000\026\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e" +
    "\054\uff9e\067\uff9e\001\002\000\026\042\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\054\uffe3" +
    "\067\uffe3\001\002\000\026\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\054\uffdf\067\uffdf" +
    "\001\002\000\026\042\217\043\044\044\216\045\224\046" +
    "\227\047\215\051\212\052\220\054\255\067\222\001\002" +
    "\000\004\044\256\001\002\000\004\057\257\001\002\000" +
    "\022\012\057\013\053\015\051\017\055\020\045\043\044" +
    "\057\062\067\050\001\002\000\026\021\073\022\075\023" +
    "\065\024\067\025\070\026\066\027\064\060\261\061\074" +
    "\065\071\001\002\000\004\063\262\001\002\000\026\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d" +
    "\052\uff9d\054\uff9d\067\uff9d\001\002\000\024\012\057\013" +
    "\053\015\051\017\055\020\045\043\044\055\046\057\062" +
    "\067\050\001\002\000\004\063\265\001\002\000\042\012" +
    "\uffa8\013\uffa8\015\uffa8\017\uffa8\020\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8\054" +
    "\uffa8\057\uffa8\067\uffa8\001\002\000\026\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\054" +
    "\uffe0\067\uffe0\001\002\000\026\021\073\022\075\023\065" +
    "\024\067\025\070\026\066\027\064\061\074\063\270\065" +
    "\071\001\002\000\026\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\051\uffe2\052\uffe2\054\uffe2\067\uffe2\001" +
    "\002\000\004\057\272\001\002\000\022\012\057\013\053" +
    "\015\051\017\055\020\045\043\044\057\062\067\050\001" +
    "\002\000\026\021\073\022\075\023\065\024\067\025\070" +
    "\026\066\027\064\060\274\061\074\065\071\001\002\000" +
    "\004\053\275\001\002\000\026\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\054\uffdf\067" +
    "\uffdf\001\002\000\026\042\217\043\044\044\216\045\224" +
    "\046\227\047\215\051\212\052\220\054\277\067\222\001" +
    "\002\000\026\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\047\uff9f\051\uff9f\052\uff9f\054\uff9f\067\uff9f\001\002\000" +
    "\022\012\057\013\053\015\051\017\055\020\045\043\044" +
    "\057\062\067\050\001\002\000\026\021\073\022\075\023" +
    "\065\024\067\025\070\026\066\027\064\060\302\061\074" +
    "\065\071\001\002\000\004\053\303\001\002\000\026\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf" +
    "\052\uffdf\054\uffdf\067\uffdf\001\002\000\026\042\217\043" +
    "\044\044\216\045\224\046\227\047\215\051\212\052\220" +
    "\054\305\067\222\001\002\000\030\042\uff9a\043\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\047\uff9a\050\307\051\uff9a\052\uff9a" +
    "\054\uff9a\067\uff9a\001\002\000\026\042\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c\054\uff9c" +
    "\067\uff9c\001\002\000\004\053\310\001\002\000\026\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf" +
    "\052\uffdf\054\uffdf\067\uffdf\001\002\000\026\042\217\043" +
    "\044\044\216\045\224\046\227\047\215\051\212\052\220" +
    "\054\312\067\222\001\002\000\026\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b\054\uff9b" +
    "\067\uff9b\001\002\000\026\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\054\uffe1\067\uffe1" +
    "\001\002\000\006\041\uffec\053\uffec\001\002\000\006\041" +
    "\uffed\053\uffed\001\002\000\004\053\317\001\002\000\004" +
    "\070\024\001\002\000\006\054\uffab\070\uffab\001\002\000" +
    "\006\054\323\070\024\001\002\000\006\054\uffac\070\uffac" +
    "\001\002\000\010\037\uffad\040\uffad\054\uffad\001\002\000" +
    "\004\053\325\001\002\000\004\067\327\001\002\000\006" +
    "\054\331\062\330\001\002\000\006\054\uffc5\062\uffc5\001" +
    "\002\000\004\067\332\001\002\000\014\034\uffc7\037\uffc7" +
    "\040\uffc7\054\uffc7\070\uffc7\001\002\000\006\054\uffc6\062" +
    "\uffc6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\004\026\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\015\001\001" +
    "\000\006\004\020\030\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\022\031\021\001\001\000\002" +
    "\001\001\000\006\006\151\032\150\001\001\000\004\055" +
    "\024\001\001\000\006\011\027\045\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\034" +
    "\001\001\000\004\043\042\001\001\000\002\001\001\000" +
    "\004\057\037\001\001\000\004\002\040\001\001\000\002" +
    "\001\001\000\016\013\046\024\051\035\053\044\057\047" +
    "\060\051\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\051\035\053\047\060\051\136\001\001\000" +
    "\016\012\127\013\125\024\051\035\053\047\060\051\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\051\035\053" +
    "\047\060\051\062\001\001\000\002\001\001\000\012\024" +
    "\051\035\053\047\060\051\107\001\001\000\012\024\051" +
    "\035\053\047\060\051\106\001\001\000\012\024\051\035" +
    "\053\047\060\051\105\001\001\000\012\024\051\035\053" +
    "\047\060\051\104\001\001\000\012\024\051\035\053\047" +
    "\060\051\103\001\001\000\012\024\051\035\053\047\060" +
    "\051\100\001\001\000\002\001\001\000\012\024\051\035" +
    "\053\047\060\051\077\001\001\000\012\024\051\035\053" +
    "\047\060\051\076\001\001\000\012\024\051\035\053\047" +
    "\060\051\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\051\035" +
    "\053\047\060\051\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\113" +
    "\024\051\035\053\047\060\051\112\001\001\000\004\017" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\051\035\053\047\060\051\117\001" +
    "\001\000\004\017\120\001\001\000\002\001\001\000\004" +
    "\025\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\131\001\001\000\016\013\133\023\135\024\051\035" +
    "\053\047\060\051\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\141" +
    "\001\001\000\002\001\001\000\004\056\143\001\001\000" +
    "\004\002\144\001\001\000\004\043\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\156\001\001\000" +
    "\002\001\001\000\004\015\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\163\001\001\000\004\021" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\170\001\001\000\004\021\171\001" +
    "\001\000\002\001\001\000\004\007\175\001\001\000\004" +
    "\007\314\001\001\000\004\007\313\001\001\000\004\046" +
    "\200\001\001\000\004\007\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\207\001\001\000\006\031\021\050\210\001\001\000" +
    "\020\024\222\034\220\035\225\036\212\037\213\040\230" +
    "\041\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\270\001\001" +
    "\000\012\024\051\035\053\047\060\051\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\222\034\232\001\001\000\012\024" +
    "\051\035\053\047\060\051\242\001\001\000\004\060\234" +
    "\001\001\000\002\001\001\000\016\013\236\020\237\024" +
    "\051\035\053\047\060\051\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\051\035\053\047\060\051\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\247\001\001\000\020\024\222\034\220\035\225\036\212" +
    "\037\213\040\230\041\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\253\001\001\000\020\024\222" +
    "\034\220\035\225\036\212\037\213\040\230\041\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\051" +
    "\035\053\047\060\051\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\236\020\263" +
    "\024\051\035\053\047\060\051\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\051\035" +
    "\053\047\060\051\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\275\001\001\000\020\024\222\034" +
    "\220\035\225\036\212\037\213\040\230\041\224\001\001" +
    "\000\002\001\001\000\012\024\051\035\053\047\060\051" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\303\001\001\000\020\024\222\034\220\035\225\036" +
    "\212\037\213\040\230\041\224\001\001\000\004\042\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\310\001\001\000\020\024\222\034\220\035\225\036\212" +
    "\037\213\040\230\041\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\320\031\317\001\001\000\002\001" +
    "\001\000\004\031\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error No Recuperable de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    //String tmp="";
    TablaSimbolos tablaSimbolos = new TablaSimbolos();
    PilaSemantica pila = new PilaSemantica();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= Pragma Solidity Version Semicolon CONTRACT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTRACT ::= Contract Identifier O_Braces Enums Variables Structs Functions C_Braces 
            {
              Object RESULT =null;
		
    System.out.println(tablaSimbolos.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTRACT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Enums ::= Enums ENUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Enums",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Enums ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Enums",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Variables ::= Variables VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Structs ::= Structs STRUCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Structs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Structs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Structs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Functions ::= Functions FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Functions",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Functions",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RS_Funcion reg = new RS_Funcion(ident);
                                        pila.push(reg);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCTION ::= Function Identifier NT$0 O_Parentheses Function_Parameters C_Parentheses Modifiers RETURNS O_Braces Variables SENTENCIAS C_Braces 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
TokenVar t = new TokenVar();
                                                        t.setNombre(ident);
                                                        t.setTipo(type);
                                                        t.setSubclase("variable (parametro)");
                                                        t.setAlcance(pila.buscarAlcance());
                                                        t.setValor("");
                                                        if(tablaSimbolos.buscarTokenVariable(t)){
                                                            System.out.println("El parametro " + t.getNombre() + " ya fue declarado");
                                                        }else{
                                                            tablaSimbolos.agregarToken(t);
                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Function_Parameters ::= Var_Type Identifier NT$1 Function_Parameters_PRIMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Function_Parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
TokenVar t = new TokenVar();
                                                                    t.setNombre(ident);
                                                                    t.setTipo(type);
                                                                    t.setSubclase("variable (parametro)");
                                                                    t.setAlcance(pila.buscarAlcance());
                                                                    t.setValor("");
                                                                    if(tablaSimbolos.buscarTokenVariable(t)){
                                                                        System.out.println("El parametro " + t.getNombre() + " ya fue declarado");
                                                                    }else{
                                                                        tablaSimbolos.agregarToken(t);
                                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Function_Parameters_PRIMA ::= Comma Var_Type Identifier NT$2 Function_Parameters_PRIMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters_PRIMA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Function_Parameters_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters_PRIMA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Modifiers ::= Public Modifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Modifiers ::= Private Modifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Modifiers ::= Modifier Modifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Modifiers ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RETURNS ::= Returns O_Parentheses Var_Type Identifier C_Parentheses 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RETURNS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= SENTENCIAS ASIGNATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= SENTENCIAS WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= SENTENCIAS FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= SENTENCIAS DO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS ::= SENTENCIAS IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS ::= SENTENCIAS FUNC_CALL Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAS ::= SENTENCIAS Return expression Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS ::= SENTENCIAS Break Semicolon 
            {
              Object RESULT =null;
		 if(!pila.buscarWhile()){
                                                                                                                                                                                                                    System.out.println("Se está usando un break fuera de los bloques permitidos");
                                                                                                                                                                                                                } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= SENTENCIAS Continue Semicolon 
            {
              Object RESULT =null;
		 if(!pila.buscarWhile()){
                                                                                                                                                                                                                    System.out.println("Se está usando un continue fuera de los bloques permitidos");
                                                                                                                                                                                                                } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression Or expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression And expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression Equal expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression Equals expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression Same_Different_Op expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression Greater_Lesser_Op expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression Least_Important_Op expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression Most_Important_Op expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression QuestionMark expression Colon expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= ExclamationMark expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= O_Parentheses expression C_Parentheses 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= primaryExpression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primaryExpression ::= Number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primaryExpression ::= Hexadecimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primaryExpression ::= String 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primaryExpression ::= Boolean_Value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // primaryExpression ::= FUNC_CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // primaryExpression ::= Identifier 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!tablaSimbolos.buscarVariable(ident,pila.buscarAlcance())){
                                                                                                        System.out.println("La variable " + ident + " no está definida en el scope");
                                                                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // primaryExpression ::= Body_Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Body_Identifier ::= Identifier Period Identifier Body_Identifier_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Body_Identifier ::= This Period Identifier Body_Identifier_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Body_Identifier_PRIMA ::= O_Parentheses C_Parentheses 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier_PRIMA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Body_Identifier_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier_PRIMA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ENUM ::= Enum Identifier O_Braces EnumIds C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENUM",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EnumIds ::= EnumIds Comma Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EnumIds",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EnumIds ::= Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EnumIds",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$3 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RS_Tipo reg = new RS_Tipo(type);
                        pila.push(reg);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VAR ::= Var_Type NT$3 Var_PRIMA_PRIMA Semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String value = "";
                                                     if(pila.top().getTipoRS().equals("constante")){
                                                        RS_DO reg = (RS_DO) pila.top();
                                                        value = reg.getValor();
                                                        pila.pop();
                                                     }
                                                     while(!pila.top().getTipoRS().equals("tipo")){
                                                         RS_ID reg = (RS_ID) pila.pop();
                                                         TokenVar t = new TokenVar();
                                                         t.setTipo(pila.buscarRSTipo());
                                                         t.setSubclase("variable");
                                                         t.setAlcance(pila.buscarAlcance());
                                                         t.setNombre(reg.getNombre());
                                                         t.setValor(value);
                                                         if(tablaSimbolos.buscarTokenVariable(t)){
                                                             System.out.println("La variable " + reg.getNombre() + " ya fue declarada");
                                                         }else{
                                                             tablaSimbolos.agregarToken(t);
                                                         }
                                                     }
                                                     pila.pop();
                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAR_PRIMA ::= Equal VAR_PRIMA_PRIMA_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAR_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAR_PRIMA_PRIMA_PRIMA ::= expression 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RS_DO reg = new RS_DO(exp);
                                           pila.push(reg);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA_PRIMA_PRIMA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAR_PRIMA_PRIMA_PRIMA ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA_PRIMA_PRIMA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$4 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RS_ID reg = new RS_ID(ident);
                                                pila.push(reg);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Var_PRIMA_PRIMA ::= Privacy Identifier NT$4 OTHER_IDENT VAR_PRIMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_PRIMA_PRIMA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Var_PRIMA_PRIMA ::= O_Brackets C_Brackets Identifier OTHER_IDENT VAR_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_PRIMA_PRIMA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$5 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RS_ID reg = new RS_ID(ident);
                                          pila.push(reg);
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OTHER_IDENT ::= Comma Identifier NT$5 OTHER_IDENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTHER_IDENT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OTHER_IDENT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTHER_IDENT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Array ::= O_Brackets ArrayValue ArrayValue_PRIMA C_Brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Array",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ArrayValue ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ArrayValue ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ArrayValue ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ArrayValue_PRIMA ::= Comma ArrayValue_PRIMA_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ArrayValue_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ArrayValue_PRIMA_PRIMA ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA_PRIMA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ArrayValue_PRIMA_PRIMA ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA_PRIMA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Privacy ::= Public 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Privacy",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Privacy ::= Private 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Privacy",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Privacy ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Privacy",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STRUCT ::= Struct Identifier O_Braces StructVar C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCT",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // StructVar ::= StructVar VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StructVar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // StructVar ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StructVar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$6 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if(!tablaSimbolos.buscarVariable(ident,pila.buscarAlcance())){
                                    System.out.println("La variable " + ident + " no está definida en el scope");
                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNATION ::= Identifier NT$6 Equal ASIGNATION_PRIMA Semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNATION ::= Body_Identifier Equal ASIGNATION_PRIMA Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNATION_PRIMA ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION_PRIMA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNATION_PRIMA ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION_PRIMA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNC_CALL ::= Identifier O_Parentheses FUNC_CALL_PARAMETERS C_Parentheses 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNC_CALL_PARAMETERS ::= expression FUNC_CALL_PARAMETERS_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNC_CALL_PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNC_CALL_PARAMETERS_PRIMA ::= Comma expression FUNC_CALL_PARAMETERS_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS_PRIMA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNC_CALL_PARAMETERS_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS_PRIMA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$7 ::= 
            {
              Object RESULT =null;
RS_While reg = new RS_While();
                pila.push(reg);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // WHILE ::= While NT$7 O_Parentheses expression C_Parentheses O_Braces SENTENCIAS C_Braces 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FOR ::= For O_Parentheses ASIGNATION expression Semicolon expression C_Parentheses O_Braces SENTENCIAS C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DO ::= Do O_Braces SENTENCIAS C_Braces While O_Parentheses expression C_Parentheses Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF ::= If O_Parentheses expression C_Parentheses O_Braces SENTENCIAS C_Braces ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELSE ::= Else O_Braces SENTENCIAS C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
