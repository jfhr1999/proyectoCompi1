
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectoCompilador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\026\007\000\002\027" +
    "\012\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\002\000\002\033\015\000\002" +
    "\015\005\000\002\015\002\000\002\021\006\000\002\021" +
    "\002\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\002\000\002\047\007\000\002\047\002\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\005\000\002\051" +
    "\006\000\002\051\005\000\002\051\005\000\002\051\002" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\007\000\002\036" +
    "\004\000\002\036\005\000\002\036\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\024\006\000\002\024\006\000\002\025\004\000\002\025" +
    "\002\000\002\030\007\000\002\010\005\000\002\010\003" +
    "\000\002\031\005\000\002\044\004\000\002\044\002\000" +
    "\002\045\003\000\002\045\003\000\002\046\006\000\002" +
    "\046\007\000\002\002\005\000\002\002\002\000\002\013" +
    "\006\000\002\012\003\000\002\012\003\000\002\012\002" +
    "\000\002\022\004\000\002\022\002\000\002\023\003\000" +
    "\002\023\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\002\000\002\032\007\000\002\014\004\000\002\014" +
    "\003\000\002\034\006\000\002\034\006\000\002\020\003" +
    "\000\002\020\003\000\002\035\006\000\002\016\004\000" +
    "\002\016\002\000\002\017\005\000\002\017\002\000\002" +
    "\037\011\000\002\040\014\000\002\041\013\000\002\042" +
    "\012\000\002\043\006\000\002\043\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\032\004\001\002\000\004\033\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\015\010\001\002\000\004\065\011\001\002\000" +
    "\004\035\013\001\002\000\004\002\000\001\002\000\004" +
    "\012\014\001\002\000\004\055\015\001\002\000\014\010" +
    "\ufffd\036\ufffd\041\ufffd\042\ufffd\056\ufffd\001\002\000\014" +
    "\010\ufffb\036\020\041\ufffb\042\ufffb\056\ufffb\001\002\000" +
    "\014\010\ufffe\036\ufffe\041\ufffe\042\ufffe\056\ufffe\001\002" +
    "\000\004\012\314\001\002\000\012\010\024\041\ufff9\042" +
    "\ufff9\056\ufff9\001\002\000\034\010\ufffc\012\ufffc\041\ufffc" +
    "\042\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\053\ufffc\054\ufffc\056\ufffc\001\002\000\010\041\145" +
    "\042\ufff7\056\ufff7\001\002\000\012\012\uffb4\037\030\040" +
    "\025\057\031\001\002\000\004\012\uffb5\001\002\000\004" +
    "\065\144\001\002\000\004\012\141\001\002\000\004\012" +
    "\uffb6\001\002\000\004\060\032\001\002\000\004\012\033" +
    "\001\002\000\010\063\uffbf\064\035\065\uffbf\001\002\000" +
    "\006\063\040\065\uffc5\001\002\000\004\012\036\001\002" +
    "\000\010\063\uffbf\064\035\065\uffbf\001\002\000\006\063" +
    "\uffc0\065\uffc0\001\002\000\024\012\046\013\056\014\051" +
    "\016\047\021\053\022\043\045\042\057\044\061\060\001" +
    "\002\000\004\065\uffc1\001\002\000\004\066\136\001\002" +
    "\000\022\012\046\013\056\014\051\016\047\021\053\022" +
    "\043\045\042\061\060\001\002\000\030\012\046\013\056" +
    "\014\051\016\047\021\053\022\043\045\042\057\044\060" +
    "\uffbb\061\060\064\uffbb\001\002\000\004\065\uffc3\001\002" +
    "\000\042\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\060\uffd0\061\110\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\107\067\uffd0\070\uffd0\001\002\000\036\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\060\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\067\uffd2\070" +
    "\uffd2\001\002\000\036\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\060\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\067\uffcf\070\uffcf\001\002\000\036\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\060" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\067\uffd4\070\uffd4" +
    "\001\002\000\036\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\060\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\067\uffd1\070\uffd1\001\002\000\036\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\060\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\067\uffd5\070\uffd5\001" +
    "\002\000\026\023\071\024\073\025\063\026\065\027\066" +
    "\030\064\031\062\063\072\065\uffc4\067\067\001\002\000" +
    "\004\065\uffc6\001\002\000\036\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\060\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\065\uffd3\067\uffd3\070\uffd3\001\002\000\036" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\060\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\067\uffd6" +
    "\070\uffd6\001\002\000\022\012\046\013\056\014\051\016" +
    "\047\021\053\022\043\045\042\061\060\001\002\000\026" +
    "\023\071\024\073\025\063\026\065\027\066\030\064\031" +
    "\062\062\070\063\072\067\067\001\002\000\022\012\046" +
    "\013\056\014\051\016\047\021\053\022\043\045\042\061" +
    "\060\001\002\000\022\012\046\013\056\014\051\016\047" +
    "\021\053\022\043\045\042\061\060\001\002\000\022\012" +
    "\046\013\056\014\051\016\047\021\053\022\043\045\042" +
    "\061\060\001\002\000\022\012\046\013\056\014\051\016" +
    "\047\021\053\022\043\045\042\061\060\001\002\000\022" +
    "\012\046\013\056\014\051\016\047\021\053\022\043\045" +
    "\042\061\060\001\002\000\022\012\046\013\056\014\051" +
    "\016\047\021\053\022\043\045\042\061\060\001\002\000" +
    "\036\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\060\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\067" +
    "\uffd7\070\uffd7\001\002\000\022\012\046\013\056\014\051" +
    "\016\047\021\053\022\043\045\042\061\060\001\002\000" +
    "\022\012\046\013\056\014\051\016\047\021\053\022\043" +
    "\045\042\061\060\001\002\000\022\012\046\013\056\014" +
    "\051\016\047\021\053\022\043\045\042\061\060\001\002" +
    "\000\036\023\071\024\uffe1\025\063\026\065\027\066\030" +
    "\064\031\062\060\uffe1\062\uffe1\063\072\064\uffe1\065\uffe1" +
    "\067\067\070\uffe1\001\002\000\036\023\uffdf\024\uffdf\025" +
    "\063\026\065\027\066\030\064\031\062\060\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\067\067\070\uffdf\001\002\000" +
    "\036\023\uffe0\024\uffe0\025\063\026\065\027\066\030\064" +
    "\031\062\060\uffe0\062\uffe0\063\072\064\uffe0\065\uffe0\067" +
    "\067\070\uffe0\001\002\000\026\023\071\024\073\025\063" +
    "\026\065\027\066\030\064\031\062\063\072\067\067\070" +
    "\100\001\002\000\022\012\046\013\056\014\051\016\047" +
    "\021\053\022\043\045\042\061\060\001\002\000\036\023" +
    "\071\024\073\025\063\026\065\027\066\030\064\031\062" +
    "\060\uffd9\062\uffd9\063\072\064\uffd9\065\uffd9\067\067\070" +
    "\uffd9\001\002\000\036\023\uffdc\024\uffdc\025\063\026\065" +
    "\027\uffdc\030\uffdc\031\uffdc\060\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\067\067\070\uffdc\001\002\000\036\023\uffdb" +
    "\024\uffdb\025\063\026\uffdb\027\uffdb\030\uffdb\031\uffdb\060" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\067\067\070\uffdb" +
    "\001\002\000\036\023\uffdd\024\uffdd\025\063\026\065\027" +
    "\066\030\uffdd\031\uffdd\060\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\065\uffdd\067\067\070\uffdd\001\002\000\036\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\060\uffda" +
    "\062\uffda\063\uffda\064\uffda\065\uffda\067\067\070\uffda\001" +
    "\002\000\036\023\uffde\024\uffde\025\063\026\065\027\066" +
    "\030\064\031\uffde\060\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\067\067\070\uffde\001\002\000\004\012\120\001\002" +
    "\000\024\012\046\013\056\014\051\016\047\021\053\022" +
    "\043\045\042\061\060\062\uffaa\001\002\000\030\023\071" +
    "\024\073\025\063\026\065\027\066\030\064\031\062\062" +
    "\uffa8\063\072\064\115\067\067\001\002\000\004\062\113" +
    "\001\002\000\036\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\060\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\067\uffac\070\uffac\001\002\000\004\062\uffab\001" +
    "\002\000\022\012\046\013\056\014\051\016\047\021\053" +
    "\022\043\045\042\061\060\001\002\000\030\023\071\024" +
    "\073\025\063\026\065\027\066\030\064\031\062\062\uffa8" +
    "\063\072\064\115\067\067\001\002\000\004\062\uffa9\001" +
    "\002\000\040\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\060\uffcb\061\122\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\067\uffcb\070\uffcb\001\002\000\036\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\060" +
    "\uffce\062\uffce\063\uffce\064\uffce\065\uffce\067\uffce\070\uffce" +
    "\001\002\000\004\062\123\001\002\000\036\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\060\uffcc" +
    "\062\uffcc\063\uffcc\064\uffcc\065\uffcc\067\uffcc\070\uffcc\001" +
    "\002\000\006\060\uffbc\064\uffbc\001\002\000\030\023\071" +
    "\024\073\025\063\026\065\027\066\030\064\031\062\060" +
    "\uffbd\063\072\064\uffbd\067\067\001\002\000\006\060\uffb9" +
    "\064\130\001\002\000\004\060\134\001\002\000\024\012" +
    "\046\013\056\014\051\016\047\021\053\022\043\045\042" +
    "\057\044\061\060\001\002\000\004\060\uffb7\001\002\000" +
    "\026\023\071\024\073\025\063\026\065\027\066\030\064" +
    "\031\062\060\uffb8\063\072\067\067\001\002\000\004\060" +
    "\uffba\001\002\000\010\060\uffbe\064\uffbe\065\uffbe\001\002" +
    "\000\036\023\071\024\073\025\063\026\065\027\066\030" +
    "\064\031\062\060\uffd8\062\uffd8\063\072\064\uffd8\065\uffd8" +
    "\067\067\070\uffd8\001\002\000\004\012\137\001\002\000" +
    "\040\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\060\uffcb\061\122\062\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\067\uffcb\070\uffcb\001\002\000\036\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\060\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\065\uffcd\067\uffcd\070\uffcd\001\002" +
    "\000\010\063\uffbf\064\035\065\uffbf\001\002\000\006\063" +
    "\040\065\uffc5\001\002\000\004\065\uffc2\001\002\000\034" +
    "\010\uffc7\012\uffc7\041\uffc7\042\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7\056\uffc7" +
    "\001\002\000\004\012\306\001\002\000\010\041\ufffa\042" +
    "\ufffa\056\ufffa\001\002\000\006\042\150\056\151\001\002" +
    "\000\004\012\153\001\002\000\004\002\uffff\001\002\000" +
    "\006\042\ufff8\056\ufff8\001\002\000\004\061\154\001\002" +
    "\000\006\010\156\062\ufff4\001\002\000\004\062\165\001" +
    "\002\000\004\012\157\001\002\000\006\062\ufff2\064\161" +
    "\001\002\000\004\062\ufff5\001\002\000\004\010\162\001" +
    "\002\000\004\012\163\001\002\000\006\062\ufff2\064\161" +
    "\001\002\000\004\062\ufff3\001\002\000\014\020\167\037" +
    "\171\040\166\043\uffee\055\uffee\001\002\000\014\020\167" +
    "\037\171\040\166\043\uffee\055\uffee\001\002\000\014\020" +
    "\167\037\171\040\166\043\uffee\055\uffee\001\002\000\006" +
    "\043\174\055\uffec\001\002\000\014\020\167\037\171\040" +
    "\166\043\uffee\055\uffee\001\002\000\006\043\ufff1\055\ufff1" +
    "\001\002\000\004\055\201\001\002\000\004\061\175\001" +
    "\002\000\004\010\176\001\002\000\004\012\177\001\002" +
    "\000\004\062\200\001\002\000\004\055\uffed\001\002\000" +
    "\030\010\ufffb\012\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\053\ufffb\054\ufffb\056\ufffb\001\002\000" +
    "\030\010\024\012\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\053\uffe2\054\uffe2\056\uffe2\001\002\000" +
    "\026\012\214\044\211\045\042\046\210\047\216\050\221" +
    "\051\207\053\204\054\212\056\222\001\002\000\004\065" +
    "\303\001\002\000\026\012\uffea\044\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\053\uffea\054\uffea\056\uffea\001" +
    "\002\000\026\012\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\053\uffe9\054\uffe9\056\uffe9\001\002\000" +
    "\004\061\270\001\002\000\004\061\262\001\002\000\022" +
    "\012\046\013\056\014\051\016\047\021\053\022\043\045" +
    "\042\061\060\001\002\000\004\065\257\001\002\000\026" +
    "\012\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\053\uffeb\054\uffeb\056\uffeb\001\002\000\010\061\110" +
    "\063\227\066\107\001\002\000\004\063\254\001\002\000" +
    "\004\055\244\001\002\000\004\065\243\001\002\000\026" +
    "\012\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\053\uffe7\054\uffe7\056\uffe7\001\002\000\004\061\224" +
    "\001\002\000\006\042\ufff6\056\ufff6\001\002\000\026\012" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\053\uffe8\054\uffe8\056\uffe8\001\002\000\006\012\226\045" +
    "\042\001\002\000\022\012\046\013\056\014\051\016\047" +
    "\021\053\022\043\045\042\061\060\001\002\000\006\063" +
    "\227\066\107\001\002\000\024\012\046\013\056\014\051" +
    "\016\047\021\053\022\043\045\042\057\044\061\060\001" +
    "\002\000\004\065\uffad\001\002\000\004\065\233\001\002" +
    "\000\026\023\071\024\073\025\063\026\065\027\066\030" +
    "\064\031\062\063\072\065\uffae\067\067\001\002\000\042" +
    "\012\uffb0\013\uffb0\014\uffb0\016\uffb0\021\uffb0\022\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\053\uffb0" +
    "\054\uffb0\056\uffb0\061\uffb0\001\002\000\026\023\071\024" +
    "\073\025\063\026\065\027\066\030\064\031\062\063\072" +
    "\065\235\067\067\001\002\000\022\012\046\013\056\014" +
    "\051\016\047\021\053\022\043\045\042\061\060\001\002" +
    "\000\026\023\071\024\073\025\063\026\065\027\066\030" +
    "\064\031\062\062\237\063\072\067\067\001\002\000\004" +
    "\055\240\001\002\000\026\012\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2\056\uffe2" +
    "\001\002\000\026\012\214\044\211\045\042\046\210\047" +
    "\216\050\221\051\207\053\204\054\212\056\242\001\002" +
    "\000\026\012\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\053\uffa6\054\uffa6\056\uffa6\001\002\000\026" +
    "\012\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\053\uffe6\054\uffe6\056\uffe6\001\002\000\026\012\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053" +
    "\uffe2\054\uffe2\056\uffe2\001\002\000\026\012\214\044\211" +
    "\045\042\046\210\047\216\050\221\051\207\053\204\054" +
    "\212\056\246\001\002\000\004\046\247\001\002\000\004" +
    "\055\250\001\002\000\022\012\046\013\056\014\051\016" +
    "\047\021\053\022\043\045\042\061\060\001\002\000\026" +
    "\023\071\024\073\025\063\026\065\027\066\030\064\031" +
    "\062\062\252\063\072\067\067\001\002\000\004\065\253" +
    "\001\002\000\026\012\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\053\uffa5\054\uffa5\056\uffa5\001\002" +
    "\000\024\012\046\013\056\014\051\016\047\021\053\022" +
    "\043\045\042\057\044\061\060\001\002\000\004\065\256" +
    "\001\002\000\042\012\uffaf\013\uffaf\014\uffaf\016\uffaf\021" +
    "\uffaf\022\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\053\uffaf\054\uffaf\056\uffaf\061\uffaf\001\002\000" +
    "\026\012\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\053\uffe3\054\uffe3\056\uffe3\001\002\000\026\023" +
    "\071\024\073\025\063\026\065\027\066\030\064\031\062" +
    "\063\072\065\261\067\067\001\002\000\026\012\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5" +
    "\054\uffe5\056\uffe5\001\002\000\022\012\046\013\056\014" +
    "\051\016\047\021\053\022\043\045\042\061\060\001\002" +
    "\000\026\023\071\024\073\025\063\026\065\027\066\030" +
    "\064\031\062\062\264\063\072\067\067\001\002\000\004" +
    "\055\265\001\002\000\026\012\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2\056\uffe2" +
    "\001\002\000\026\012\214\044\211\045\042\046\210\047" +
    "\216\050\221\051\207\053\204\054\212\056\267\001\002" +
    "\000\026\012\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\053\uffa7\054\uffa7\056\uffa7\001\002\000\022" +
    "\012\046\013\056\014\051\016\047\021\053\022\043\045" +
    "\042\061\060\001\002\000\026\023\071\024\073\025\063" +
    "\026\065\027\066\030\064\031\062\062\272\063\072\067" +
    "\067\001\002\000\004\055\273\001\002\000\026\012\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053" +
    "\uffe2\054\uffe2\056\uffe2\001\002\000\026\012\214\044\211" +
    "\045\042\046\210\047\216\050\221\051\207\053\204\054" +
    "\212\056\275\001\002\000\030\012\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\277\053\uffa2\054" +
    "\uffa2\056\uffa2\001\002\000\026\012\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\053\uffa4\054\uffa4\056" +
    "\uffa4\001\002\000\004\055\300\001\002\000\026\012\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053" +
    "\uffe2\054\uffe2\056\uffe2\001\002\000\026\012\214\044\211" +
    "\045\042\046\210\047\216\050\221\051\207\053\204\054" +
    "\212\056\302\001\002\000\026\012\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\053\uffa3\054\uffa3\056" +
    "\uffa3\001\002\000\026\012\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\053\uffe4\054\uffe4\056\uffe4\001" +
    "\002\000\006\043\uffef\055\uffef\001\002\000\006\043\ufff0" +
    "\055\ufff0\001\002\000\004\055\307\001\002\000\004\010" +
    "\024\001\002\000\006\010\uffb1\056\uffb1\001\002\000\006" +
    "\010\024\056\313\001\002\000\006\010\uffb2\056\uffb2\001" +
    "\002\000\010\041\uffb3\042\uffb3\056\uffb3\001\002\000\004" +
    "\055\315\001\002\000\004\012\317\001\002\000\006\056" +
    "\321\064\320\001\002\000\006\056\uffc8\064\uffc8\001\002" +
    "\000\004\012\322\001\002\000\014\010\uffca\036\uffca\041" +
    "\uffca\042\uffca\056\uffca\001\002\000\006\056\uffc9\064\uffc9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\026\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\015\001\001" +
    "\000\006\004\020\030\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\022\031\021\001\001\000\002" +
    "\001\001\000\006\006\146\032\145\001\001\000\006\011" +
    "\026\046\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\033\001\001\000\004\044\040" +
    "\001\001\000\002\001\001\000\004\002\036\001\001\000" +
    "\002\001\001\000\016\013\044\024\047\035\051\036\053" +
    "\045\054\050\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\047\035\051\036\134\050\056\001\001" +
    "\000\016\012\125\013\123\024\047\035\051\036\124\050" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\047\035" +
    "\051\036\060\050\056\001\001\000\002\001\001\000\012" +
    "\024\047\035\051\036\105\050\056\001\001\000\012\024" +
    "\047\035\051\036\104\050\056\001\001\000\012\024\047" +
    "\035\051\036\103\050\056\001\001\000\012\024\047\035" +
    "\051\036\102\050\056\001\001\000\012\024\047\035\051" +
    "\036\101\050\056\001\001\000\012\024\047\035\051\036" +
    "\076\050\056\001\001\000\002\001\001\000\012\024\047" +
    "\035\051\036\075\050\056\001\001\000\012\024\047\035" +
    "\051\036\074\050\056\001\001\000\012\024\047\035\051" +
    "\036\073\050\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\047" +
    "\035\051\036\100\050\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\111\024\047\035\051\036\110\050\056\001\001\000\004" +
    "\017\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\047\035\051\036\115\050\056" +
    "\001\001\000\004\017\116\001\001\000\002\001\001\000" +
    "\004\025\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\126\001\001\000\002\001\001\000\016\013\130" +
    "\023\132\024\047\035\051\036\131\050\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\137\001\001\000\002\001\001\000\004\002\141\001\001" +
    "\000\004\044\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\163\001\001\000\002\001\001\000\004\007\167\001" +
    "\001\000\004\007\304\001\001\000\004\007\303\001\001" +
    "\000\004\047\172\001\001\000\004\007\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\201\001\001\000\006\031\021\051\202" +
    "\001\001\000\020\024\214\034\212\035\216\037\204\040" +
    "\205\041\222\042\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\047\035\051\036\257\050\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\214\034\224\001\001\000\012\024\047" +
    "\035\051\036\233\050\056\001\001\000\002\001\001\000" +
    "\016\013\227\020\230\024\047\035\051\036\231\050\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\047" +
    "\035\051\036\235\050\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\240\001\001\000\020\024\214" +
    "\034\212\035\216\037\204\040\205\041\222\042\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\244" +
    "\001\001\000\020\024\214\034\212\035\216\037\204\040" +
    "\205\041\222\042\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\047\035\051\036\250\050\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\227\020\254\024\047\035\051\036\231\050" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\047\035\051\036\262\050\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\265\001\001\000\020\024" +
    "\214\034\212\035\216\037\204\040\205\041\222\042\217" +
    "\001\001\000\002\001\001\000\012\024\047\035\051\036" +
    "\270\050\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\273\001\001\000\020\024\214\034\212\035" +
    "\216\037\204\040\205\041\222\042\217\001\001\000\004" +
    "\043\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\300\001\001\000\020\024\214\034\212\035\216" +
    "\037\204\040\205\041\222\042\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\310\031\307\001\001\000" +
    "\002\001\001\000\004\031\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    String tmp="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= Pragma Solidity Version Semicolon CONTRACT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTRACT ::= Contract Identifier O_Braces Enums Variables Structs Functions C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTRACT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Enums ::= Enums ENUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Enums",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Enums ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Enums",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Variables ::= Variables VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Structs ::= Structs STRUCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Structs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Structs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Structs",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Functions ::= Functions FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Functions",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Functions",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCTION ::= Function Identifier O_Parentheses Function_Parameters C_Parentheses Modifiers RETURNS O_Braces Variables SENTENCIAS C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Function_Parameters ::= Var_Type Identifier Function_Parameters_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Function_Parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Function_Parameters_PRIMA ::= Comma Var_Type Identifier Function_Parameters_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters_PRIMA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Function_Parameters_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function_Parameters_PRIMA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Modifiers ::= Public Modifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Modifiers ::= Private Modifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Modifiers ::= Modifier Modifiers 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Modifiers ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RETURNS ::= Returns O_Parentheses Var_Type Identifier C_Parentheses 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RETURNS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNS",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENTENCIAS ASIGNATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= SENTENCIAS WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENTENCIAS FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= SENTENCIAS DO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= SENTENCIAS IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= SENTENCIAS FUNC_CALL Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= SENTENCIAS Return expression Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS ::= SENTENCIAS Break Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS ::= SENTENCIAS Continue Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression Or expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression And expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression Equal expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression Equals expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression Same_Different_Op expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression Greater_Lesser_Op expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression Least_Important_Op expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression Most_Important_Op expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression QuestionMark expression Colon expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= ExclamationMark expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= O_Parentheses expression C_Parentheses 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= primaryExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primaryExpression ::= Number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // primaryExpression ::= Hexadecimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primaryExpression ::= String 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primaryExpression ::= Boolean_Value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primaryExpression ::= FUNC_CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primaryExpression ::= Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primaryExpression ::= Body_Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Body_Identifier ::= Identifier Period Identifier Body_Identifier_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Body_Identifier ::= This Period Identifier Body_Identifier_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Body_Identifier_PRIMA ::= O_Parentheses C_Parentheses 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier_PRIMA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Body_Identifier_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body_Identifier_PRIMA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ENUM ::= Enum Identifier O_Braces EnumIds C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENUM",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EnumIds ::= EnumIds Comma Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EnumIds",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EnumIds ::= Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EnumIds",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAR ::= Var_Type Var_PRIMA_PRIMA Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAR_PRIMA ::= Equal VAR_PRIMA_PRIMA_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VAR_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VAR_PRIMA_PRIMA_PRIMA ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA_PRIMA_PRIMA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VAR_PRIMA_PRIMA_PRIMA ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_PRIMA_PRIMA_PRIMA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Var_PRIMA_PRIMA ::= Privacy Identifier OTHER_IDENT VAR_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_PRIMA_PRIMA",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Var_PRIMA_PRIMA ::= O_Brackets C_Brackets Identifier OTHER_IDENT VAR_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_PRIMA_PRIMA",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OTHER_IDENT ::= Comma Identifier OTHER_IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTHER_IDENT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OTHER_IDENT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTHER_IDENT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Array ::= O_Brackets ArrayValue ArrayValue_PRIMA C_Brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Array",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ArrayValue ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ArrayValue ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ArrayValue ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArrayValue_PRIMA ::= Comma ArrayValue_PRIMA_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArrayValue_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ArrayValue_PRIMA_PRIMA ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA_PRIMA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ArrayValue_PRIMA_PRIMA ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayValue_PRIMA_PRIMA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Privacy ::= Public 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Privacy",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Privacy ::= Private 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Privacy",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Privacy ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Privacy",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // STRUCT ::= Struct Identifier O_Braces StructVar C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCT",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StructVar ::= StructVar VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StructVar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StructVar ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StructVar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGNATION ::= Identifier Equal ASIGNATION_PRIMA Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGNATION ::= Body_Identifier Equal ASIGNATION_PRIMA Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGNATION_PRIMA ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION_PRIMA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASIGNATION_PRIMA ::= Array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION_PRIMA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNC_CALL ::= Identifier O_Parentheses FUNC_CALL_PARAMETERS C_Parentheses 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNC_CALL_PARAMETERS ::= expression FUNC_CALL_PARAMETERS_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNC_CALL_PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNC_CALL_PARAMETERS_PRIMA ::= Comma expression FUNC_CALL_PARAMETERS_PRIMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS_PRIMA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNC_CALL_PARAMETERS_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMETERS_PRIMA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // WHILE ::= While O_Parentheses expression C_Parentheses O_Braces SENTENCIAS C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FOR ::= For O_Parentheses ASIGNATION expression Semicolon expression C_Parentheses O_Braces SENTENCIAS C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DO ::= Do O_Braces SENTENCIAS C_Braces While O_Braces expression C_Parentheses Semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF ::= If O_Parentheses expression C_Parentheses O_Braces SENTENCIAS C_Braces ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELSE ::= Else O_Braces SENTENCIAS C_Braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
